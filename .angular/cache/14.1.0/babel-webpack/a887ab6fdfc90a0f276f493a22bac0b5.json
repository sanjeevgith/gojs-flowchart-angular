{"ast":null,"code":"import _classCallCheck from \"C:/Users/Mon2/OneDrive/Desktop/angular-gojs/gojs-angular-basic/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Mon2/OneDrive/Desktop/angular-gojs/gojs-angular-basic/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * Sample app showcasing gojs-angular components\r\n * For use with gojs-angular version 2.x\r\n */\nimport { ChangeDetectorRef } from '@angular/core';\nimport * as go from 'gojs';\nimport { DataSyncService, DiagramComponent, PaletteComponent } from 'gojs-angular';\nimport produce from \"immer\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"gojs-angular\";\nimport * as i2 from \"./inspector/inspector.component\";\nvar _c0 = [\"myDiagram\"];\nvar _c1 = [\"myPalette\"];\nexport var AppComponent = /*#__PURE__*/(function () {\n  var AppComponent = /*#__PURE__*/function () {\n    function AppComponent(cdr) {\n      _classCallCheck(this, AppComponent);\n\n      this.cdr = cdr; // Big object that holds app-level state data\n      // As of gojs-angular 2.0, immutability is expected and required of state for ease of change detection.\n      // Whenever updating state, immutability must be preserved. It is recommended to use immer for this, a small package that makes working with immutable data easy.\n\n      this.state = {\n        // Diagram state props\n        diagramNodeData: [{\n          id: 'Alpha',\n          text: \"Alpha\",\n          color: 'lightblue',\n          loc: \"0 0\"\n        }, {\n          id: 'Beta',\n          text: \"Beta\",\n          color: 'orange',\n          loc: \"100 0\"\n        }, {\n          id: 'Gamma',\n          text: \"Gamma\",\n          color: 'lightgreen',\n          loc: \"0 100\"\n        }, {\n          id: 'Delta',\n          text: \"Delta\",\n          color: 'pink',\n          loc: \"100 100\"\n        }],\n        diagramLinkData: [{\n          key: -1,\n          from: 'Alpha',\n          to: 'Beta',\n          fromPort: 'r',\n          toPort: '1'\n        }, {\n          key: -2,\n          from: 'Alpha',\n          to: 'Gamma',\n          fromPort: 'b',\n          toPort: 't'\n        }, {\n          key: -3,\n          from: 'Beta',\n          to: 'Beta'\n        }, {\n          key: -4,\n          from: 'Gamma',\n          to: 'Delta',\n          fromPort: 'r',\n          toPort: 'l'\n        }, {\n          key: -5,\n          from: 'Delta',\n          to: 'Alpha',\n          fromPort: 't',\n          toPort: 'r'\n        }],\n        diagramModelData: {\n          prop: 'value'\n        },\n        skipsDiagramUpdate: false,\n        selectedNodeData: null,\n        // Palette state props\n        paletteNodeData: [{\n          key: 'Epsilon',\n          text: 'Epsilon',\n          color: 'red'\n        }, {\n          key: 'Kappa',\n          text: 'Kappa',\n          color: 'purple'\n        }],\n        paletteModelData: {\n          prop: 'val'\n        }\n      };\n      this.diagramDivClassName = 'myDiagramDiv';\n      this.paletteDivClassName = 'myPaletteDiv'; // When the diagram model changes, update app data to reflect those changes. Be sure to use immer's \"produce\" function to preserve immutability\n\n      this.diagramModelChange = function (changes) {\n        if (!changes) return;\n        var appComp = this;\n        this.state = produce(this.state, function (draft) {\n          // set skipsDiagramUpdate: true since GoJS already has this update\n          // this way, we don't log an unneeded transaction in the Diagram's undoManager history\n          draft.skipsDiagramUpdate = true;\n          draft.diagramNodeData = DataSyncService.syncNodeData(changes, draft.diagramNodeData, appComp.observedDiagram.model);\n          draft.diagramLinkData = DataSyncService.syncLinkData(changes, draft.diagramLinkData, appComp.observedDiagram.model);\n          draft.diagramModelData = DataSyncService.syncModelData(changes, draft.diagramModelData); // If one of the modified nodes was the selected node used by the inspector, update the inspector selectedNodeData object\n\n          var modifiedNodeDatas = changes.modifiedNodeData;\n\n          if (modifiedNodeDatas && draft.selectedNodeData) {\n            for (var i = 0; i < modifiedNodeDatas.length; i++) {\n              var mn = modifiedNodeDatas[i];\n              var nodeKeyProperty = appComp.myDiagramComponent.diagram.model.nodeKeyProperty;\n\n              if (mn[nodeKeyProperty] === draft.selectedNodeData[nodeKeyProperty]) {\n                draft.selectedNodeData = mn;\n              }\n            }\n          }\n        });\n      }; // Overview Component testing\n\n\n      this.oDivClassName = 'myOverviewDiv';\n      this.observedDiagram = null; // currently selected node; for inspector\n\n      this.selectedNodeData = null;\n    } // initialize diagram / templates\n\n\n    _createClass(AppComponent, [{\n      key: \"initDiagram\",\n      value: function initDiagram() {\n        var $ = go.GraphObject.make;\n        var dia = $(go.Diagram, {\n          'undoManager.isEnabled': true,\n          'clickCreatingTool.archetypeNodeData': {\n            text: 'new node',\n            color: 'lightblue'\n          },\n          model: $(go.GraphLinksModel, {\n            nodeKeyProperty: 'id',\n            linkToPortIdProperty: 'toPort',\n            linkFromPortIdProperty: 'fromPort',\n            linkKeyProperty: 'key' // IMPORTANT! must be defined for merges and data sync when using GraphLinksModel\n\n          })\n        });\n        dia.commandHandler.archetypeGroupData = {\n          key: 'Group',\n          isGroup: true\n        };\n\n        var makePort = function makePort(id, spot) {\n          return $(go.Shape, 'Circle', {\n            opacity: .5,\n            fill: 'gray',\n            strokeWidth: 0,\n            desiredSize: new go.Size(8, 8),\n            portId: id,\n            alignment: spot,\n            fromLinkable: true,\n            toLinkable: true\n          });\n        }; // define the Node template\n\n\n        dia.nodeTemplate = $(go.Node, 'Spot', {\n          contextMenu: $('ContextMenu', $('ContextMenuButton', $(go.TextBlock, 'Group'), {\n            click: function click(e, obj) {\n              e.diagram.commandHandler.groupSelection();\n            }\n          }, new go.Binding('visible', '', function (o) {\n            return o.diagram.selection.count > 1;\n          }).ofObject()))\n        }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), $(go.Panel, 'Auto', $(go.Shape, 'RoundedRectangle', {\n          stroke: null\n        }, new go.Binding('fill', 'color', function (c, panel) {\n          return c;\n        })), $(go.TextBlock, {\n          margin: 8,\n          editable: true\n        }, new go.Binding('text').makeTwoWay())), // Ports\n        makePort('t', go.Spot.TopCenter), makePort('l', go.Spot.Left), makePort('r', go.Spot.Right), makePort('b', go.Spot.BottomCenter));\n        return dia;\n      }\n    }, {\n      key: \"initPalette\",\n      value: function initPalette() {\n        var $ = go.GraphObject.make;\n        var palette = $(go.Palette); // define the Node template\n\n        palette.nodeTemplate = $(go.Node, 'Auto', $(go.Shape, 'RoundedRectangle', {\n          stroke: null\n        }, new go.Binding('fill', 'color')), $(go.TextBlock, {\n          margin: 8\n        }, new go.Binding('text', 'key')));\n        palette.model = $(go.GraphLinksModel);\n        return palette;\n      }\n    }, {\n      key: \"initOverview\",\n      value: function initOverview() {\n        var $ = go.GraphObject.make;\n        var overview = $(go.Overview);\n        return overview;\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        if (this.observedDiagram) return;\n        this.observedDiagram = this.myDiagramComponent.diagram;\n        this.cdr.detectChanges(); // IMPORTANT: without this, Angular will throw ExpressionChangedAfterItHasBeenCheckedError (dev mode only)\n\n        var appComp = this; // listener for inspector\n\n        this.myDiagramComponent.diagram.addDiagramListener('ChangedSelection', function (e) {\n          if (e.diagram.selection.count === 0) {\n            appComp.selectedNodeData = null;\n          }\n\n          var node = e.diagram.selection.first();\n          appComp.state = produce(appComp.state, function (draft) {\n            if (node instanceof go.Node) {\n              var idx = draft.diagramNodeData.findIndex(function (nd) {\n                return nd.id == node.data.id;\n              });\n              var nd = draft.diagramNodeData[idx];\n              draft.selectedNodeData = nd;\n            } else {\n              draft.selectedNodeData = null;\n            }\n          });\n        });\n      } // end ngAfterViewInit\n\n      /**\r\n       * Update a node's data based on some change to an inspector row's input\r\n       * @param changedPropAndVal An object with 2 entries: \"prop\" (the node data prop changed), and \"newVal\" (the value the user entered in the inspector <input>)\r\n       */\n\n    }, {\n      key: \"handleInspectorChange\",\n      value: function handleInspectorChange(changedPropAndVal) {\n        var path = changedPropAndVal.prop;\n        var value = changedPropAndVal.newVal;\n        this.state = produce(this.state, function (draft) {\n          var data = draft.selectedNodeData;\n          data[path] = value;\n          var key = data.id;\n          var idx = draft.diagramNodeData.findIndex(function (nd) {\n            return nd.id == key;\n          });\n\n          if (idx >= 0) {\n            draft.diagramNodeData[idx] = data;\n            draft.skipsDiagramUpdate = false; // we need to sync GoJS data with this new app state, so do not skips Diagram update\n          }\n        });\n      }\n    }]);\n\n    return AppComponent;\n  }();\n\n  AppComponent.Éµfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ÉµÉµdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  AppComponent.Éµcmp = /*@__PURE__*/i0.ÉµÉµdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    viewQuery: function AppComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ÉµÉµviewQuery(_c0, 7);\n        i0.ÉµÉµviewQuery(_c1, 7);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ÉµÉµqueryRefresh(_t = i0.ÉµÉµloadQuery()) && (ctx.myDiagramComponent = _t.first);\n        i0.ÉµÉµqueryRefresh(_t = i0.ÉµÉµloadQuery()) && (ctx.myPaletteComponent = _t.first);\n      }\n    },\n    decls: 16,\n    vars: 14,\n    consts: [[1, \"left\"], [3, \"initPalette\", \"divClassName\", \"nodeDataArray\", \"modelData\"], [\"myPalette\", \"\"], [3, \"initDiagram\", \"nodeDataArray\", \"linkDataArray\", \"divClassName\", \"modelData\", \"skipsDiagramUpdate\", \"skipsDiagramUpdateChange\", \"modelChange\"], [\"myDiagram\", \"\"], [3, \"initOverview\", \"divClassName\", \"observedDiagram\"], [\"myOverview\", \"\"], [3, \"nodeData\", \"onInspectorChange\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ÉµÉµelementStart(0, \"h1\");\n        i0.ÉµÉµtext(1, \"GoJS / Angular - Components Sample\");\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelementStart(2, \"div\", 0);\n        i0.ÉµÉµtext(3, \" Palette \");\n        i0.ÉµÉµelement(4, \"gojs-palette\", 1, 2);\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelementStart(6, \"div\", 0);\n        i0.ÉµÉµtext(7, \" Diagram \");\n        i0.ÉµÉµelementStart(8, \"gojs-diagram\", 3, 4);\n        i0.ÉµÉµlistener(\"skipsDiagramUpdateChange\", function AppComponent_Template_gojs_diagram_skipsDiagramUpdateChange_8_listener($event) {\n          return ctx.state.skipsDiagramUpdate = $event;\n        })(\"modelChange\", function AppComponent_Template_gojs_diagram_modelChange_8_listener($event) {\n          return ctx.diagramModelChange($event);\n        });\n        i0.ÉµÉµelementEnd()();\n        i0.ÉµÉµelementStart(10, \"div\", 0);\n        i0.ÉµÉµtext(11, \" Overview \");\n        i0.ÉµÉµelement(12, \"gojs-overview\", 5, 6);\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelementStart(14, \"div\", 0)(15, \"app-inspector\", 7);\n        i0.ÉµÉµlistener(\"onInspectorChange\", function AppComponent_Template_app_inspector_onInspectorChange_15_listener($event) {\n          return ctx.handleInspectorChange($event);\n        });\n        i0.ÉµÉµelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ÉµÉµadvance(4);\n        i0.ÉµÉµproperty(\"initPalette\", ctx.initPalette)(\"divClassName\", ctx.paletteDivClassName)(\"nodeDataArray\", ctx.state.paletteNodeData)(\"modelData\", ctx.state.paletteModelData);\n        i0.ÉµÉµadvance(4);\n        i0.ÉµÉµproperty(\"initDiagram\", ctx.initDiagram)(\"nodeDataArray\", ctx.state.diagramNodeData)(\"linkDataArray\", ctx.state.diagramLinkData)(\"divClassName\", ctx.diagramDivClassName)(\"modelData\", ctx.state.diagramModelData)(\"skipsDiagramUpdate\", ctx.state.skipsDiagramUpdate);\n        i0.ÉµÉµadvance(4);\n        i0.ÉµÉµproperty(\"initOverview\", ctx.initOverview)(\"divClassName\", ctx.oDivClassName)(\"observedDiagram\", ctx.observedDiagram);\n        i0.ÉµÉµadvance(3);\n        i0.ÉµÉµproperty(\"nodeData\", ctx.state.selectedNodeData);\n      }\n    },\n    dependencies: [i1.DiagramComponent, i1.OverviewComponent, i1.PaletteComponent, i2.InspectorComponent],\n    styles: [\"@import\\\"http://fonts.googleapis.com/css?family=Roboto:400,400italic,500,500italic,700,700italic,900,900italic,300italic,300,100italic,100\\\";body{font-family:Roboto,sans-serif}.myDiagramDiv{background:whitesmoke;width:700px;height:300px;border:1px solid black}.myPaletteDiv{background:lightcyan;border:1px solid navy;width:125px;height:300px}.myOverviewDiv{width:200px;height:150px;background:whitesmoke;border:1px solid black}.left{float:left;padding:5px;margin:5px}.box{border:solid 1px black;background:whitesmoke;box-shadow:0 4px 8px #0003,0 6px 20px #00000030}.clear{clear:both}\\n\"],\n    encapsulation: 3\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
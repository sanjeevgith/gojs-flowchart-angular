{"ast":null,"code":"import _classCallCheck from \"C:/Users/Mon2/OneDrive/Desktop/angular-gojs/gojs-angular-basic/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Mon2/OneDrive/Desktop/angular-gojs/gojs-angular-basic/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { ChangeDetectorRef } from '@angular/core';\nimport * as go from 'gojs';\nimport { DataSyncService, DiagramComponent, PaletteComponent } from 'gojs-angular';\nimport produce from \"immer\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"gojs-angular\";\nimport * as i2 from \"./inspector/inspector.component\";\nvar _c0 = [\"myDiagram\"];\nvar _c1 = [\"myPalette\"];\nexport var AppComponent = /*#__PURE__*/(function () {\n  var AppComponent = /*#__PURE__*/function () {\n    function AppComponent(cdr) {\n      _classCallCheck(this, AppComponent);\n\n      this.cdr = cdr;\n      this.state = {\n        // Diagram state props\n        diagramNodeData: [// { id: 'Alpha', text: \"Alpha\", color: 'lightblue', loc: \"0 0\" },\n          // { id: 'Beta', text: \"Beta\", color: 'orange', loc: \"100 0\" },\n          // { id: 'Gamma', text: \"Gamma\", color: 'lightgreen', loc: \"0 100\" },\n          // { id: 'Delta', text: \"Delta\", color: 'pink', loc: \"100 100\" }\n        ],\n        diagramLinkData: [{\n          key: -1,\n          from: 'Alpha',\n          to: 'Beta',\n          fromPort: 'r',\n          toPort: '1'\n        }, {\n          key: -2,\n          from: 'Alpha',\n          to: 'Gamma',\n          fromPort: 'b',\n          toPort: 't'\n        }, {\n          key: -3,\n          from: 'Beta',\n          to: 'Beta'\n        }, {\n          key: -4,\n          from: 'Gamma',\n          to: 'Delta',\n          fromPort: 'r',\n          toPort: 'l'\n        }, {\n          key: -5,\n          from: 'Delta',\n          to: 'Alpha',\n          fromPort: 't',\n          toPort: 'r'\n        }],\n        diagramModelData: {\n          prop: 'value'\n        },\n        skipsDiagramUpdate: false,\n        selectedNodeData: null,\n        // Palette state props\n        paletteNodeData: [// { key: 'Epsilon', text: 'Epsilon', color: 'red' },\n        // { key: 'Kappa', text: 'Kappa', color: 'purple' },\n        {\n          category: \"Start\",\n          text: \"Start\"\n        }, {\n          category: \"Step\",\n          text: \"Step\"\n        }, {\n          category: \"Conditional\",\n          text: \"???\"\n        }, {\n          category: \"End\",\n          text: \"End\"\n        }, {\n          category: \"Comment\",\n          text: \"Comment\"\n        }],\n        paletteModelData: {\n          prop: 'val'\n        }\n      };\n      this.diagramDivClassName = 'myDiagramDiv';\n      this.paletteDivClassName = 'myPaletteDiv'; // When the diagram model changes, update app data to reflect those changes. Be sure to use immer's \"produce\" function to preserve immutability\n\n      this.diagramModelChange = function (changes) {\n        if (!changes) return;\n        var appComp = this;\n        this.state = produce(this.state, function (draft) {\n          // set skipsDiagramUpdate: true since GoJS already has this update\n          // this way, we don't log an unneeded transaction in the Diagram's undoManager history\n          draft.skipsDiagramUpdate = true;\n          draft.diagramNodeData = DataSyncService.syncNodeData(changes, draft.diagramNodeData, appComp.observedDiagram.model);\n          draft.diagramLinkData = DataSyncService.syncLinkData(changes, draft.diagramLinkData, appComp.observedDiagram.model);\n          draft.diagramModelData = DataSyncService.syncModelData(changes, draft.diagramModelData); // If one of the modified nodes was the selected node used by the inspector, update the inspector selectedNodeData object\n\n          var modifiedNodeDatas = changes.modifiedNodeData;\n\n          if (modifiedNodeDatas && draft.selectedNodeData) {\n            for (var i = 0; i < modifiedNodeDatas.length; i++) {\n              var mn = modifiedNodeDatas[i];\n              var nodeKeyProperty = appComp.myDiagramComponent.diagram.model.nodeKeyProperty;\n\n              if (mn[nodeKeyProperty] === draft.selectedNodeData[nodeKeyProperty]) {\n                draft.selectedNodeData = mn;\n              }\n            }\n          }\n        });\n      }; // Overview Component testing\n\n\n      this.oDivClassName = 'myOverviewDiv';\n      this.observedDiagram = null; // currently selected node; for inspector\n\n      this.selectedNodeData = null;\n    } // initialize diagram / templates\n\n\n    _createClass(AppComponent, [{\n      key: \"initDiagram\",\n      value: function initDiagram() {\n        var $ = go.GraphObject.make;\n        this.dia = $(go.Diagram, {\n          'undoManager.isEnabled': true,\n          'clickCreatingTool.archetypeNodeData': {\n            text: 'new node',\n            color: 'lightblue'\n          },\n          model: $(go.GraphLinksModel, {\n            nodeKeyProperty: 'id',\n            linkToPortIdProperty: 'toPort',\n            linkFromPortIdProperty: 'fromPort',\n            linkKeyProperty: 'key' // IMPORTANT! must be defined for merges and data sync when using GraphLinksModel\n\n          })\n        });\n        this.dia.commandHandler.archetypeGroupData = {\n          key: 'Group',\n          isGroup: true\n        };\n\n        var makePort = function makePort(name, align, spot, output, input) {\n          var horizontal = align.equals(go.Spot.Top) || align.equals(go.Spot.Bottom); // the port is basically just a transparent rectangle that stretches along the side of the node,\n          // and becomes colored when the mouse passes over it\n\n          return $(go.Shape, {\n            fill: \"transparent\",\n            strokeWidth: 0,\n            width: horizontal ? NaN : 8,\n            height: !horizontal ? NaN : 8,\n            alignment: align,\n            stretch: horizontal ? go.GraphObject.Horizontal : go.GraphObject.Vertical,\n            portId: name,\n            fromSpot: spot,\n            fromLinkable: output,\n            toSpot: spot,\n            toLinkable: input,\n            cursor: \"pointer\",\n            mouseEnter: function mouseEnter(e, port) {\n              if (!e.diagram.isReadOnly) port.fill = \"rgba(255,0,255,0.5)\";\n            },\n            mouseLeave: function mouseLeave(e, port) {\n              return port.fill = \"transparent\";\n            }\n          });\n        };\n\n        function textStyle() {\n          return {\n            font: \"bold 11pt Lato, Helvetica, Arial, sans-serif\",\n            stroke: \"#F8F8F8\"\n          };\n        }\n\n        function nodeStyle() {\n          return [new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n            locationSpot: go.Spot.Center\n          }];\n        }\n\n        this.dia.nodeTemplateMap.add(\"\", $(go.Node, \"Table\", nodeStyle(), // the main object is a Panel that surrounds a TextBlock with a rectangular Shape\n        $(go.Panel, \"Auto\", $(go.Shape, \"Rectangle\", {\n          fill: \"#282c34\",\n          stroke: \"#00A9C9\",\n          strokeWidth: 3.5\n        }, new go.Binding(\"figure\", \"figure\")), $(go.TextBlock, textStyle(), {\n          margin: 8,\n          maxSize: new go.Size(160, NaN),\n          wrap: go.TextBlock.WrapFit,\n          editable: true\n        }, new go.Binding(\"text\").makeTwoWay())), // four named ports, one on each side:\n        makePort(\"T\", go.Spot.Top, go.Spot.TopSide, false, true), makePort(\"L\", go.Spot.Left, go.Spot.LeftSide, true, true), makePort(\"R\", go.Spot.Right, go.Spot.RightSide, true, true), makePort(\"B\", go.Spot.Bottom, go.Spot.BottomSide, true, false)));\n        this.dia.nodeTemplateMap.add(\"Conditional\", $(go.Node, \"Table\", nodeStyle(), // the main object is a Panel that surrounds a TextBlock with a rectangular Shape\n        $(go.Panel, \"Auto\", $(go.Shape, \"Diamond\", {\n          fill: \"#282c34\",\n          stroke: \"#00A9C9\",\n          strokeWidth: 3.5\n        }, new go.Binding(\"figure\", \"figure\")), $(go.TextBlock, textStyle(), {\n          margin: 8,\n          maxSize: new go.Size(160, NaN),\n          wrap: go.TextBlock.WrapFit,\n          editable: true\n        }, new go.Binding(\"text\").makeTwoWay())), // four named ports, one on each side:\n        makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true), makePort(\"L\", go.Spot.Left, go.Spot.Left, true, true), makePort(\"R\", go.Spot.Right, go.Spot.Right, true, true), makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)));\n        this.dia.nodeTemplateMap.add(\"Start\", $(go.Node, \"Table\", nodeStyle(), $(go.Panel, \"Spot\", $(go.Shape, \"Circle\", {\n          desiredSize: new go.Size(70, 70),\n          fill: \"#282c34\",\n          stroke: \"#09d3ac\",\n          strokeWidth: 3.5\n        }), $(go.TextBlock, \"Start\", textStyle(), new go.Binding(\"text\"))), // three named ports, one on each side except the top, all output only:\n        makePort(\"L\", go.Spot.Left, go.Spot.Left, true, false), makePort(\"R\", go.Spot.Right, go.Spot.Right, true, false), makePort(\"B\", go.Spot.Bottom, go.Spot.Bottom, true, false)));\n        this.dia.nodeTemplateMap.add(\"End\", $(go.Node, \"Table\", nodeStyle(), $(go.Panel, \"Spot\", $(go.Shape, \"Circle\", {\n          desiredSize: new go.Size(60, 60),\n          fill: \"#282c34\",\n          stroke: \"#DC3C00\",\n          strokeWidth: 3.5\n        }), $(go.TextBlock, \"End\", textStyle(), new go.Binding(\"text\"))), // three named ports, one on each side except the bottom, all input only:\n        makePort(\"T\", go.Spot.Top, go.Spot.Top, false, true), makePort(\"L\", go.Spot.Left, go.Spot.Left, false, true), makePort(\"R\", go.Spot.Right, go.Spot.Right, false, true)));\n        go.Shape.defineFigureGenerator(\"File\", function (shape, w, h) {\n          var geo = new go.Geometry();\n          var fig = new go.PathFigure(0, 0, true); // starting point\n\n          geo.add(fig);\n          fig.add(new go.PathSegment(go.PathSegment.Line, .75 * w, 0));\n          fig.add(new go.PathSegment(go.PathSegment.Line, w, .25 * h));\n          fig.add(new go.PathSegment(go.PathSegment.Line, w, h));\n          fig.add(new go.PathSegment(go.PathSegment.Line, 0, h).close());\n          var fig2 = new go.PathFigure(.75 * w, 0, false);\n          geo.add(fig2); // The Fold\n\n          fig2.add(new go.PathSegment(go.PathSegment.Line, .75 * w, .25 * h));\n          fig2.add(new go.PathSegment(go.PathSegment.Line, w, .25 * h));\n          geo.spot1 = new go.Spot(0, .25);\n          geo.spot2 = go.Spot.BottomRight;\n          return geo;\n        });\n        this.dia.nodeTemplateMap.add(\"Comment\", $(go.Node, \"Auto\", nodeStyle(), $(go.Shape, \"File\", {\n          fill: \"#282c34\",\n          stroke: \"#DEE0A3\",\n          strokeWidth: 3\n        }), $(go.TextBlock, textStyle(), {\n          margin: 8,\n          maxSize: new go.Size(200, NaN),\n          wrap: go.TextBlock.WrapFit,\n          textAlign: \"center\",\n          editable: true\n        }, new go.Binding(\"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n        ));\n        return this.dia;\n      }\n    }, {\n      key: \"printDiagram\",\n      value: function printDiagram() {\n        var svgWindow = window.open();\n        if (!svgWindow) return; // failure to open a new Window\n\n        var printSize = new go.Size(700, 960);\n        var bnds = this.dia.documentBounds;\n        var x = bnds.x;\n        var y = bnds.y;\n\n        while (y < bnds.bottom) {\n          while (x < bnds.right) {\n            var svg = this.dia.makeSvg({\n              scale: 1.0,\n              position: new go.Point(x, y),\n              size: printSize\n            });\n            svgWindow.document.body.appendChild(svg);\n            x += printSize.width;\n          }\n\n          x = bnds.x;\n          y += printSize.height;\n        }\n\n        setTimeout(function () {\n          return svgWindow.print();\n        }, 1);\n      } // public save() {\n      //   document.getElementById(\"mySavedModel\").value = this.dia.model.toJson();\n      //   this.dia.isModified = false;\n      // }\n\n    }, {\n      key: \"load\",\n      value: function load() {\n        this.dia.model = go.Model.fromJson(document.getElementById(\"mySavedModel\"));\n      }\n    }, {\n      key: \"initPalette\",\n      value: function initPalette() {\n        var $ = go.GraphObject.make;\n        this.palette = $(go.Palette); // define the Node template\n        // this.palette.nodeTemplate =\n        // $(go.Node, 'Auto',\n        //   $(go.Shape, 'Diamond',\n        //     {\n        //       stroke: null\n        //     },\n        //     new go.Binding('fill', 'color')\n        //   ),\n        //   $(go.TextBlock, { margin: 8 },\n        //     new go.Binding('text', 'key'))\n        // );\n        // this.palette =\n        // $(go.Palette, \"myPaletteDiv\",  // must name or refer to the DIV HTML element\n        //   {\n        //     // Instead of the default animation, use a custom fade-down\n        //     \"animationManager.initialAnimationStyle\": go.AnimationManager.None,\n        //     \"InitialAnimationStarting\": this.animateFadeDown, // Instead, animate with this function\n        //     nodeTemplateMap: this.dia.nodeTemplateMap,  // share the templates used by myDiagram\n        //     model: new go.GraphLinksModel([  // specify the contents of the Palette\n        //       { category: \"Start\", text: \"Start\" },\n        //       { text: \"Step\" },\n        //       { category: \"Conditional\", text: \"???\" },\n        //       { category: \"End\", text: \"End\" },\n        //       { category: \"Comment\", text: \"Comment\" }\n        //     ])\n        //   });\n\n        this.palette.model = $(go.GraphLinksModel);\n        return this.palette;\n      }\n    }, {\n      key: \"animateFadeDown\",\n      value: function animateFadeDown(e) {\n        var diagram = e.diagram;\n        var animation = new go.Animation();\n        animation.isViewportUnconstrained = true; // So Diagram positioning rules let the animation start off-screen\n\n        animation.easing = go.Animation.EaseOutExpo;\n        animation.duration = 900; // Fade \"down\", in other words, fade in from above\n\n        animation.add(diagram, 'position', diagram.position.copy().offset(0, 200), diagram.position);\n        animation.add(diagram, 'opacity', 0, 1);\n        animation.start();\n      }\n    }, {\n      key: \"initOverview\",\n      value: function initOverview() {\n        var $ = go.GraphObject.make;\n        var overview = $(go.Overview);\n        return overview;\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        if (this.observedDiagram) return;\n        this.observedDiagram = this.myDiagramComponent.diagram;\n        this.cdr.detectChanges(); // IMPORTANT: without this, Angular will throw ExpressionChangedAfterItHasBeenCheckedError (dev mode only)\n\n        var appComp = this; // listener for inspector\n\n        this.myDiagramComponent.diagram.addDiagramListener('ChangedSelection', function (e) {\n          if (e.diagram.selection.count === 0) {\n            appComp.selectedNodeData = null;\n          }\n\n          var node = e.diagram.selection.first();\n          appComp.state = produce(appComp.state, function (draft) {\n            if (node instanceof go.Node) {\n              var idx = draft.diagramNodeData.findIndex(function (nd) {\n                return nd.id == node.data.id;\n              });\n              var nd = draft.diagramNodeData[idx];\n              draft.selectedNodeData = nd;\n            } else {\n              draft.selectedNodeData = null;\n            }\n          });\n        });\n      } // end ngAfterViewInit\n\n      /**\r\n       * Update a node's data based on some change to an inspector row's input\r\n       * @param changedPropAndVal An object with 2 entries: \"prop\" (the node data prop changed), and \"newVal\" (the value the user entered in the inspector <input>)\r\n       */\n\n    }, {\n      key: \"handleInspectorChange\",\n      value: function handleInspectorChange(changedPropAndVal) {\n        var path = changedPropAndVal.prop;\n        var value = changedPropAndVal.newVal;\n        this.state = produce(this.state, function (draft) {\n          var data = draft.selectedNodeData;\n          data[path] = value;\n          var key = data.id;\n          var idx = draft.diagramNodeData.findIndex(function (nd) {\n            return nd.id == key;\n          });\n\n          if (idx >= 0) {\n            draft.diagramNodeData[idx] = data;\n            draft.skipsDiagramUpdate = false; // we need to sync GoJS data with this new app state, so do not skips Diagram update\n          }\n        });\n      }\n    }]);\n\n    return AppComponent;\n  }();\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    viewQuery: function AppComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myDiagramComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myPaletteComponent = _t.first);\n      }\n    },\n    decls: 15,\n    vars: 11,\n    consts: [[1, \"left\"], [3, \"initPalette\", \"divClassName\", \"nodeDataArray\", \"modelData\"], [\"myPalette\", \"\"], [3, \"initDiagram\", \"nodeDataArray\", \"linkDataArray\", \"divClassName\", \"modelData\", \"skipsDiagramUpdate\", \"skipsDiagramUpdateChange\", \"modelChange\"], [\"myDiagram\", \"\"], [3, \"nodeData\", \"onInspectorChange\"], [\"id\", \"myPaletteDiv\", 2, \"width\", \"100px\", \"margin-right\", \"2px\", \"background-color\", \"#282c34\"], [\"id\", \"mySavedModel\", 2, \"display\", \"none\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"GoJS / Angular - Components Sample\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 0);\n        i0.ɵɵtext(3, \" Palette \");\n        i0.ɵɵelement(4, \"gojs-palette\", 1, 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 0);\n        i0.ɵɵtext(7, \" Diagram \");\n        i0.ɵɵelementStart(8, \"gojs-diagram\", 3, 4);\n        i0.ɵɵlistener(\"skipsDiagramUpdateChange\", function AppComponent_Template_gojs_diagram_skipsDiagramUpdateChange_8_listener($event) {\n          return ctx.state.skipsDiagramUpdate = $event;\n        })(\"modelChange\", function AppComponent_Template_gojs_diagram_modelChange_8_listener($event) {\n          return ctx.diagramModelChange($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"div\", 0)(11, \"app-inspector\", 5);\n        i0.ɵɵlistener(\"onInspectorChange\", function AppComponent_Template_app_inspector_onInspectorChange_11_listener($event) {\n          return ctx.handleInspectorChange($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(12, \"div\", 6);\n        i0.ɵɵelementStart(13, \"textarea\", 7);\n        i0.ɵɵtext(14, \"{ \\\"class\\\": \\\"go.GraphLinksModel\\\",\\n  \\\"linkFromPortIdProperty\\\": \\\"fromPort\\\",\\n  \\\"linkToPortIdProperty\\\": \\\"toPort\\\",\\n  \\\"nodeDataArray\\\": [\\n  {\\\"category\\\":\\\"Comment\\\", \\\"loc\\\":\\\"360 -10\\\", \\\"text\\\":\\\"Kookie Brittle\\\", \\\"key\\\":-13},\\n  {\\\"key\\\":-1, \\\"category\\\":\\\"Start\\\", \\\"loc\\\":\\\"175 0\\\", \\\"text\\\":\\\"Start\\\"},\\n  {\\\"key\\\":0, \\\"loc\\\":\\\"-5 75\\\", \\\"text\\\":\\\"Preheat oven to 375 F\\\"},\\n  {\\\"key\\\":1, \\\"loc\\\":\\\"175 100\\\", \\\"text\\\":\\\"In a bowl, blend: 1 cup margarine, 1.5 teaspoon vanilla, 1 teaspoon salt\\\"},\\n  {\\\"key\\\":2, \\\"loc\\\":\\\"175 200\\\", \\\"text\\\":\\\"Gradually beat in 1 cup sugar and 2 cups sifted flour\\\"},\\n  {\\\"key\\\":3, \\\"loc\\\":\\\"175 290\\\", \\\"text\\\":\\\"Mix in 6 oz (1 cup) Nestle's Semi-Sweet Chocolate Morsels\\\"},\\n  {\\\"key\\\":4, \\\"loc\\\":\\\"175 380\\\", \\\"text\\\":\\\"Press evenly into ungreased 15x10x1 pan\\\"},\\n  {\\\"key\\\":5, \\\"loc\\\":\\\"355 85\\\", \\\"text\\\":\\\"Finely chop 1/2 cup of your choice of nuts\\\"},\\n  {\\\"key\\\":6, \\\"loc\\\":\\\"175 450\\\", \\\"text\\\":\\\"Sprinkle nuts on top\\\"},\\n  {\\\"key\\\":7, \\\"loc\\\":\\\"175 515\\\", \\\"text\\\":\\\"Bake for 25 minutes and let cool\\\"},\\n  {\\\"key\\\":8, \\\"loc\\\":\\\"175 585\\\", \\\"text\\\":\\\"Cut into rectangular grid\\\"},\\n  {\\\"key\\\":-2, \\\"category\\\":\\\"End\\\", \\\"loc\\\":\\\"175 660\\\", \\\"text\\\":\\\"Enjoy!\\\"}\\n  ],\\n  \\\"linkDataArray\\\": [\\n  {\\\"from\\\":1, \\\"to\\\":2, \\\"fromPort\\\":\\\"B\\\", \\\"toPort\\\":\\\"T\\\"},\\n  {\\\"from\\\":2, \\\"to\\\":3, \\\"fromPort\\\":\\\"B\\\", \\\"toPort\\\":\\\"T\\\"},\\n  {\\\"from\\\":3, \\\"to\\\":4, \\\"fromPort\\\":\\\"B\\\", \\\"toPort\\\":\\\"T\\\"},\\n  {\\\"from\\\":4, \\\"to\\\":6, \\\"fromPort\\\":\\\"B\\\", \\\"toPort\\\":\\\"T\\\"},\\n  {\\\"from\\\":6, \\\"to\\\":7, \\\"fromPort\\\":\\\"B\\\", \\\"toPort\\\":\\\"T\\\"},\\n  {\\\"from\\\":7, \\\"to\\\":8, \\\"fromPort\\\":\\\"B\\\", \\\"toPort\\\":\\\"T\\\"},\\n  {\\\"from\\\":8, \\\"to\\\":-2, \\\"fromPort\\\":\\\"B\\\", \\\"toPort\\\":\\\"T\\\"},\\n  {\\\"from\\\":-1, \\\"to\\\":0, \\\"fromPort\\\":\\\"B\\\", \\\"toPort\\\":\\\"T\\\"},\\n  {\\\"from\\\":-1, \\\"to\\\":1, \\\"fromPort\\\":\\\"B\\\", \\\"toPort\\\":\\\"T\\\"},\\n  {\\\"from\\\":-1, \\\"to\\\":5, \\\"fromPort\\\":\\\"B\\\", \\\"toPort\\\":\\\"T\\\"},\\n  {\\\"from\\\":5, \\\"to\\\":4, \\\"fromPort\\\":\\\"B\\\", \\\"toPort\\\":\\\"T\\\"},\\n  {\\\"from\\\":0, \\\"to\\\":4, \\\"fromPort\\\":\\\"B\\\", \\\"toPort\\\":\\\"T\\\"}\\n  ]}\\n  \");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"initPalette\", ctx.initPalette)(\"divClassName\", ctx.paletteDivClassName)(\"nodeDataArray\", ctx.state.paletteNodeData)(\"modelData\", ctx.state.paletteModelData);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"initDiagram\", ctx.initDiagram)(\"nodeDataArray\", ctx.state.diagramNodeData)(\"linkDataArray\", ctx.state.diagramLinkData)(\"divClassName\", ctx.diagramDivClassName)(\"modelData\", ctx.state.diagramModelData)(\"skipsDiagramUpdate\", ctx.state.skipsDiagramUpdate);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"nodeData\", ctx.state.selectedNodeData);\n      }\n    },\n    dependencies: [i1.DiagramComponent, i1.PaletteComponent, i2.InspectorComponent],\n    styles: [\"@import\\\"http://fonts.googleapis.com/css?family=Roboto:400,400italic,500,500italic,700,700italic,900,900italic,300italic,300,100italic,100\\\";body{font-family:Roboto,sans-serif}.myDiagramDiv{background:rgb(42,38,38);width:1050px;height:500px;border:1px solid black}.myPaletteDiv{background:lightcyan;border:1px solid navy;width:125px;height:500px}.left{float:left;padding:0;margin:0;border-radius:1px solid black}.box{border:solid 1px black;background:whitesmoke;box-shadow:0 4px 8px #0003,0 6px 20px #00000030}.clear{clear:both}\\n\"],\n    encapsulation: 3\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"version":3,"sources":["../../../projects/gojs-angular/src/lib/ng-diagram-helper.ts","../../../projects/gojs-angular/src/lib/diagram.component.ts","../../../projects/gojs-angular/src/lib/palette.component.ts","../../../projects/gojs-angular/src/lib/overview.component.ts","../../../projects/gojs-angular/src/lib/data-sync.service.ts","../../../projects/gojs-angular/src/lib/gojs-angular.module.ts"],"names":["NgDiagramHelper","makeMouseMoveRunOutsideAngularZone","diagram","zone","_this","this","addEventListener","DOMElement","name","listener","capture","superAddEventListener","go","Diagram","prototype","runOutsideAngular","call","run","initializeModel","nodeDataArray","linkDataArray","modelData","delayInitialization","model","commit","m","assignAllDataProperties","mergeNodeDataArray","cloneDeep","GraphLinksModel","mergeLinkDataArray","initializeModelChangedListener","component","hasOwnProperty","modelChangedListener","e","isTransactionFinished","isReadOnly","modelChange","dataChanges","toIncrementalData","emit","addModelChangedListener","mergeAppDataWithModel","isInit","DiagramComponent","skipsDiagramUpdate","EventEmitter","wasCleared","ngAfterViewInit","diagramDiv","Error","initDiagram","divRef","nativeElement","div","ngOnChanges","clear","ngOnDestroy","Component","args","selector","template","NgZone","Input","Output","ViewChild","static","PaletteComponent","palette","paletteDiv","initPalette","Palette","OverviewComponent","observedDiagram","overview","overviewDiv","initOverview","Overview","contentAlignment","Spot","Center","changes","currentValue","previousValue","observed","DataSyncService","syncNodeData","nodeData","modifiedNodeData","insertedNodeKeys","removedNodeKeys","modifiedNodesMap","Map","produce","draft","forEach","nd","key","getKeyForNodeData","set","i","length","ndEntry","get","push","filter","includes","syncLinkData","linkData","modifiedLinkData","insertedLinkKeys","removedLinkKeys","modifiedLinksMap","ld","getKeyForLinkData","ldEntry","syncModelData","Injectable","NgModule","declarations","imports","providers","exports"],"mappings":"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","sourcesContent":["import { NgZone } from \"@angular/core\";\r\nimport { EventEmitter } from \"events\";\r\nimport * as go from \"gojs\";\r\nimport { DiagramComponent } from \"./diagram.component\";\r\n\r\n/**\r\n * An interface to allow methods defined below to accept Palette or Diagram Components,\r\n * without requiring DiagramComponent or PaletteComponent directly in this file\r\n * (that would create a circular dependency)\r\n */\r\nexport interface IDiagramOrPaletteComponent {\r\n  modelChange: EventEmitter<go.IncrementalData>,\r\n  zone: NgZone,\r\n  nodeDataArray: Array<go.ObjectData>,\r\n  linkDataArray: Array<go.ObjectData>,\r\n  modelData: go.ObjectData\r\n}\r\n\r\n/**\r\n * Defines some shared helper static functions, used in Diagram / Palette / Overview Components\r\n */\r\nexport class NgDiagramHelper{\r\n  constructor() {}\r\n\r\n  /**\r\n   * Ensures mousemove event listeners on a diagram's canvas are run outside NgZone.\r\n   * This way, change detection isn't triggered on each mousemove, improving performance.\r\n   *\r\n   * If some state-alteration must happen on a mousemove event inside the diagram, use zone.run() to make sure the event triggers angular change detection.\r\n   * Used by DiagramComponent, PaletteComponent, and OverviewComponent in their ngAfterViewInit lifecycle hooks\r\n   * @param diagram\r\n   * @param zone\r\n   */\r\n  public static makeMouseMoveRunOutsideAngularZone(diagram: go.Diagram, zone: NgZone) {\r\n    diagram.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialize a given diagram's model with given node / link / model data\r\n   * @param diagram\r\n   * @param nodeDataArray\r\n   * @param linkDataArray\r\n   * @param modelData\r\n   */\r\n  public static initializeModel(diagram: go.Diagram | go.Palette, nodeDataArray: Array<go.ObjectData>, linkDataArray: Array<go.ObjectData>, modelData: go.ObjectData) {\r\n    diagram.delayInitialization(() => {\r\n      const model = diagram.model;\r\n      model.commit((m: go.Model) => {\r\n        if (modelData) {\r\n          m.assignAllDataProperties(m.modelData, modelData);\r\n        }\r\n        m.mergeNodeDataArray(m.cloneDeep(nodeDataArray));\r\n        if (linkDataArray && m instanceof go.GraphLinksModel) {\r\n          m.mergeLinkDataArray(m.cloneDeep(linkDataArray));\r\n        }\r\n      }, null);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize the model changed listener for the Palette / Diagram of a given compoennt; ensure it runs inside the component's ngZone.\r\n   * Those changes will be emitted through a the component's modelChange EventEmitter.\r\n   * @param component\r\n   */\r\n  public static initializeModelChangedListener(component: DiagramComponent) {\r\n    var diagram = null;\r\n    if (!(component.hasOwnProperty(\"diagram\")) && !(component.hasOwnProperty(\"palette\"))) return;\r\n    if (component.hasOwnProperty(\"diagram\")) diagram = component[\"diagram\"];\r\n    if (component.hasOwnProperty(\"palette\")) diagram = component[\"palette\"];\r\n    component.modelChangedListener = (e: go.ChangedEvent) => {\r\n      if (e.isTransactionFinished && e.model && !e.model.isReadOnly && component.modelChange) {\r\n        // this must be done within a NgZone.run block, so changes are detected in the parent component\r\n        component.zone.run(() => {\r\n          const dataChanges = e.model!.toIncrementalData(e);\r\n          if (dataChanges !== null) component.modelChange.emit(dataChanges);\r\n        });\r\n      }\r\n    };\r\n    diagram.addModelChangedListener(component.modelChangedListener);\r\n  }\r\n\r\n  /**\r\n   * Merge the app-level node / link / model data of a supplied Diagram|Palette Component with its underlying Diagram|Palette model data\r\n   * @param component\r\n   * @param isInit Whether or not to treat this update as a Diagram initialization\r\n   */\r\n  public static mergeAppDataWithModel(component: IDiagramOrPaletteComponent, isInit?: boolean) {\r\n    var diagram = null;\r\n    if (component.hasOwnProperty(\"diagram\")) diagram = component[\"diagram\"];\r\n    if (component.hasOwnProperty(\"palette\")) diagram = component[\"palette\"];\r\n\r\n    diagram.model.commit((m: go.Model) => {\r\n      if (isInit) diagram.model.modelData = {};\r\n      // update modelData first, in case bindings on nodes / links depend on model data\r\n      diagram.model.assignAllDataProperties(diagram.model.modelData, component.modelData);\r\n      // merge node / link data\r\n      if (isInit) diagram.model.nodeDataArray = [];\r\n      diagram.model.mergeNodeDataArray(component.nodeDataArray);\r\n      if (component.linkDataArray && diagram.model instanceof go.GraphLinksModel) {\r\n        if (isInit) diagram.model.linkDataArray = [];\r\n        diagram.model.mergeLinkDataArray(component.linkDataArray);\r\n      }\r\n    }, isInit ? null : 'update data');\r\n\r\n  }\r\n\r\n}\r\n","import { Component, ElementRef, EventEmitter, Input, NgZone, Output, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\nimport { NgDiagramHelper } from './ng-diagram-helper';\r\n\r\n@Component({\r\n  selector: 'gojs-diagram',\r\n  template: '<div #ngDiagram [className]=divClassName></div>'\r\n})\r\nexport class DiagramComponent {\r\n\r\n  /**\r\n   * Diagram initialization function. Returns a go.Diagram.\r\n   * Do not initialize model data in this function.\r\n   */\r\n  @Input() public initDiagram: () => go.Diagram;\r\n  /**  Node data for diagram */\r\n  @Input() public nodeDataArray: Array<go.ObjectData>;\r\n  /**  Link data for diagram. Optional. */\r\n  @Input() public linkDataArray: Array<go.ObjectData> = null;\r\n  /** Model data for diagram. Optional. */\r\n  @Input() public modelData: go.ObjectData = null;\r\n  /** Diagram div class name. Use this name to style your diagram in CSS. */\r\n  @Input() public divClassName: string;\r\n  /** Model changed listener function for diagram */\r\n  public modelChangedListener: ((e: go.ChangedEvent) => void) | null = null;\r\n  /** Whether or not to skip merging app data with GoJS model data (set to true if update is coming from GoJS, false if coming from app-level, usually) */\r\n  @Input() public skipsDiagramUpdate: boolean = false;\r\n  /** Event emitter -- fires when diagram model changes. Capture this emitted event in parent component */\r\n  @Output() public modelChange: EventEmitter<go.IncrementalData> = new EventEmitter<go.IncrementalData>();\r\n  /** The DIV element holding the Diagram */\r\n  @ViewChild('ngDiagram', { static: true }) public diagramDiv: ElementRef;\r\n  /** The Diagram itself */\r\n  public diagram: go.Diagram = null;\r\n  /** An internal flag used to tell ngOnChanges to treat the next sync operation as a Diagram initialization */\r\n  private wasCleared = false;\r\n\r\n  constructor(public zone: NgZone) {  }\r\n\r\n  /**\r\n   * Initializes diagram / model after view init\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.diagramDiv) {\r\n      throw new Error(\"diagramDiv is not defined\");\r\n    }\r\n    this.diagram = this.initDiagram();\r\n    if (!(this.diagram instanceof go.Diagram)) {\r\n      throw new Error(\"initDiagram function did not return a go.Diagram\");\r\n    }\r\n\r\n    // reduces change detection on mouse moves, boosting performance\r\n    NgDiagramHelper.makeMouseMoveRunOutsideAngularZone(this.diagram, this.zone);\r\n\r\n    // assign the Diagram's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n    // using the overridden addEventListener function defined in makeMouseMoveRunOutsideAngularZone\r\n    const divRef = this.diagramDiv.nativeElement;\r\n    if (divRef === null) return;\r\n    this.diagram.div = divRef;\r\n\r\n    // initialize the diagram model with the provided node / link / model data\r\n    NgDiagramHelper.initializeModel(this.diagram, this.nodeDataArray, this.linkDataArray, this.modelData);\r\n    // initializer model listener\r\n    NgDiagramHelper.initializeModelChangedListener(this);\r\n  } // end ngAfterViewInit\r\n\r\n  /**\r\n   * If a change has occurred on an @Input property, merge the app-level changes with GoJS\r\n   */\r\n  public ngOnChanges() {\r\n    if (!this.diagram || !this.diagram.model || this.skipsDiagramUpdate) return;\r\n    // if clear was just called, treat this as initial\r\n    if (this.wasCleared) {\r\n      this.diagram.delayInitialization(() => {\r\n        NgDiagramHelper.mergeAppDataWithModel(this, true);\r\n      });\r\n      this.wasCleared = false;\r\n    } else {\r\n      NgDiagramHelper.mergeAppDataWithModel(this);\r\n    }\r\n  } // end ngOnChanges\r\n\r\n  /**\r\n   * Clears the diagram of all nodes, links, and model data.\r\n   * Also clears the UndoManager history and clipboard.\r\n   * The next state update will be treated as diagram initialization.\r\n   */\r\n   public clear(): void {\r\n    const diagram = this.diagram;\r\n    if (diagram !== null) {\r\n      diagram.clear();\r\n      this.wasCleared = true;\r\n    }\r\n  } // end clear function\r\n\r\n  /**\r\n   * Set this.diagram.div to null, removing all event listeners\r\n   */\r\n  public ngOnDestroy() {\r\n    this.diagram.div = null; // removes event listeners\r\n  } // end ngOnDestroy function\r\n\r\n}\r\n","import { Component, ElementRef, EventEmitter, Input, NgZone, Output, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\nimport { NgDiagramHelper } from './ng-diagram-helper';\r\n@Component({\r\n  selector: 'gojs-palette',\r\n  template: '<div #ngPalette [className]=divClassName></div>'\r\n})\r\nexport class PaletteComponent {\r\n\r\n  /**\r\n   * Palette initialization function. Returns a go.Palette.\r\n   * Do not initialize model data in this function.\r\n   */\r\n  @Input() public initPalette: () => go.Palette;\r\n  /** Node data for palette */\r\n  @Input() public nodeDataArray: Array<go.ObjectData>;\r\n  /** Link data for palette. Optional. */\r\n  @Input() public linkDataArray: Array<go.ObjectData> = null;\r\n  /** Model data for palette. Optional. */\r\n  @Input() public modelData: go.ObjectData = null;\r\n  /** Palette div class name. Use this name to style your palette in CSS */\r\n  @Input() public divClassName: string;\r\n\r\n  /** Event emitter -- fires when palette model changes. Capture this emitted event in parent component */\r\n  @Output() public modelChange: EventEmitter<go.IncrementalData> = new EventEmitter<go.IncrementalData>();\r\n  /** The DIV element holding the Palette */\r\n  @ViewChild('ngPalette', { static: true }) public paletteDiv: ElementRef;\r\n\r\n  /** The Palette itself */\r\n  public palette: go.Palette | null = null;\r\n\r\n  constructor(public zone: NgZone) {  } \r\n\r\n  /**\r\n   * Initialize Palette after view init\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.paletteDiv) {\r\n      throw new Error(\"paletteDiv is not defined\");\r\n    }\r\n    this.palette = this.initPalette();\r\n    if (!(this.palette instanceof go.Palette)) {\r\n      throw new Error(\"initPalette function did not return a go.Palette\");\r\n    }\r\n\r\n    // reduces change detection on mouse moves, boosting performance\r\n    NgDiagramHelper.makeMouseMoveRunOutsideAngularZone(this.palette, this.zone);\r\n\r\n    // assign the Palette's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n    // using the overridden addEventListener function above\r\n    const divRef = this.paletteDiv.nativeElement;\r\n    if (divRef == null) return;\r\n    this.palette.div = divRef;\r\n\r\n    // initialize palette model\r\n    NgDiagramHelper.initializeModel(this.palette, this.nodeDataArray, this.linkDataArray, this.modelData);\r\n  }\r\n\r\n  /**\r\n   * If a change has occured on an @Input property, merge the app-level changes with GoJS\r\n   */\r\n  public ngOnChanges() {\r\n    if (!this.palette || !this.palette.model) return;\r\n    NgDiagramHelper.mergeAppDataWithModel(this);\r\n  } // end ngOnChanges \r\n  \r\n\r\n  public ngOnDestroy() {\r\n    this.palette.div = null; // removes event listeners\r\n  }\r\n\r\n}\r\n","import { Component, ElementRef, Input, NgZone, SimpleChanges, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\nimport { NgDiagramHelper } from \"./ng-diagram-helper\";\r\n\r\n@Component({\r\n  selector: 'gojs-overview',\r\n  template: '<div #ngOverview [className]=divClassName></div>'\r\n})\r\nexport class OverviewComponent {\r\n\r\n  /** The function used to initialize and return the Overview */ \r\n  @Input() public initOverview: () => go.Overview;\r\n  /** The div class name that holds the Overview. Use this name to style your Overview in CSS. */\r\n  @Input() public divClassName: string;\r\n  /** The Diagram to observe with the Overview */\r\n  @Input() public observedDiagram: go.Diagram = null;\r\n\r\n  @ViewChild('ngOverview', { static: true }) public overviewDiv: ElementRef;\r\n\r\n  /** The Overview itself  */\r\n  public overview: go.Overview | null = null;\r\n\r\n  constructor(public zone: NgZone) { }\r\n\r\n  /**\r\n   * Initialize the overview\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.overviewDiv) {\r\n      throw new Error(\"overviewDiv is not defined\");\r\n    }\r\n    if (this.initOverview) {\r\n      this.overview = this.initOverview();\r\n      if (!(this.overview instanceof go.Overview)) {\r\n        throw new Error(\"initOverview function did not return a go.Overview\");\r\n      }\r\n    } else {\r\n      this.overview = new go.Overview();\r\n      this.overview.contentAlignment = go.Spot.Center;\r\n    }\r\n\r\n    // reduces change detection on mouse moves, boosting performance\r\n    NgDiagramHelper.makeMouseMoveRunOutsideAngularZone(this.overview, this.zone);\r\n\r\n    this.overview.div = this.overviewDiv.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Only update when the observed diagram changes\r\n   * @param changes\r\n   */\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    if (!this.overview) return;\r\n    if (changes && changes.observedDiagram && changes.observedDiagram.currentValue !== changes.observedDiagram.previousValue) {\r\n      this.overview.observed = changes.observedDiagram.currentValue;\r\n    }\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.overview.div = null; // removes event listeners\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport * as go from 'gojs';\r\nimport produce from \"immer\";\r\n\r\n@Injectable()\r\nexport class DataSyncService {\r\n\r\n  /**\r\n   * Sync a node data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param nodeData The node data array to merge these changes with\r\n   * @param model Required if you have defined your model.nodeKeyProperty to be something other than 'key'\r\n   * @returns A node data array, merged with the changes\r\n   */\r\n  public static syncNodeData(changes: go.IncrementalData, nodeData: Array<go.ObjectData>, model?: go.Model) {\r\n    if (!changes) return nodeData;\r\n    if (!changes.modifiedNodeData && !changes.insertedNodeKeys && !changes.removedNodeKeys) return nodeData;\r\n\r\n    // maintain a map of modified nodes for fast lookup during insertion\r\n    const modifiedNodesMap = new go.Map<go.Key, go.ObjectData>();\r\n\r\n    // nodeData is immutable, modify it using the immer package's \"produce\" function (creates new array)\r\n    var newNodeDataArray = produce(nodeData, (draft) => {\r\n      // account for modified node data\r\n      if (changes.modifiedNodeData) {\r\n        changes.modifiedNodeData.forEach((nd: go.ObjectData) => {\r\n          // Get the value of the node key property checking wether is a function or a string\r\n          const key = model ? model.getKeyForNodeData(nd) : nd['key'];\r\n          modifiedNodesMap.set(key, nd);\r\n          for (let i = 0; i < nodeData.length; i++) {\r\n            const ndEntry = nodeData[i];\r\n            const keyNdEntry = model ? model.getKeyForNodeData(ndEntry) : ndEntry['key'];\r\n            if (keyNdEntry === key) {\r\n              draft[i] = nd;\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // account for inserted node data\r\n      if (changes.insertedNodeKeys) {\r\n        changes.insertedNodeKeys.forEach((key: go.Key) => {\r\n          const nd = modifiedNodesMap.get(key);\r\n          if (nd) {\r\n            draft.push(nd);\r\n          }\r\n        });\r\n      }\r\n\r\n      // account for removed node data\r\n      if (changes.removedNodeKeys) {\r\n        return draft.filter((nd: go.ObjectData) => {\r\n          const key = model ? model.getKeyForNodeData(nd) : nd['key'];\r\n          if (changes.removedNodeKeys.includes(key)) {\r\n            return false;\r\n          } \r\n          return true;\r\n        });\r\n      }\r\n    });\r\n\r\n    return newNodeDataArray;\r\n  }\r\n\r\n  /**\r\n   * Sync a link data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param linkData The link data array to merge these changes with\r\n   * @param model Required if you have defined your model.linkKeyProperty to be something other than 'key'\r\n   * @returns A link data array, merged with the changes\r\n   */\r\n  public static syncLinkData(changes: go.IncrementalData, linkData: Array<go.ObjectData>, model?: go.GraphLinksModel) {\r\n    if (!changes) return linkData;\r\n    if (!changes.modifiedLinkData && !changes.insertedLinkKeys && !changes.removedLinkKeys) return linkData;\r\n\r\n    // maintain a map of modified nodes for fast lookup during insertion\r\n    const modifiedLinksMap = new go.Map<go.Key, go.ObjectData>();\r\n\r\n    // linkData is immutable, modify it using the immer package's \"produce\" function (creates new array)\r\n    linkData = produce(linkData, draft => {\r\n      // account for modified link data\r\n      if (changes.modifiedLinkData) {\r\n        changes.modifiedLinkData.forEach((ld: go.ObjectData) => {\r\n          // Get the value of the link key\r\n          const key = model ? model.getKeyForLinkData(ld) : ld['key'];\r\n          modifiedLinksMap.set(key, ld);\r\n\r\n          for (let i = 0; i < linkData.length; i++) {\r\n            const ldEntry = linkData[i];\r\n            const keyLdEntry = model ? model.getKeyForLinkData(ldEntry) : ldEntry['key'];\r\n            if (keyLdEntry === key) {\r\n              draft[i] = ld;\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // account for inserted link data\r\n      if (changes.insertedLinkKeys) {\r\n        changes.insertedLinkKeys.forEach((key: go.Key) => {\r\n          const nd = modifiedLinksMap.get(key);\r\n          if (nd) {\r\n            draft.push(nd);\r\n          }\r\n        });\r\n      }\r\n\r\n      // account for removed link data\r\n      if (changes.removedLinkKeys) {\r\n        return draft.filter((ld: go.ObjectData) => {\r\n          const key = model ? model.getKeyForLinkData(ld) : ld['key'];\r\n          if (changes.removedLinkKeys.includes(key)) {\r\n            return false;\r\n          } return true;\r\n        });\r\n      }\r\n    });\r\n\r\n    return linkData;\r\n  }\r\n\r\n  /**\r\n   * Sync modelData with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param modelData The modelData to merge these changes with\r\n   * @returns A modelData object, merged with the changes\r\n   */\r\n  public static syncModelData(changes: go.IncrementalData, modelData: go.ObjectData) {\r\n    if (!changes) return modelData;\r\n    if (!changes.modelData) return modelData;\r\n    if (changes.modelData) {\r\n      return changes.modelData;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { DataSyncService } from './data-sync.service';\r\nimport { DiagramComponent } from './diagram.component';\r\nimport { OverviewComponent } from './overview.component';\r\nimport { PaletteComponent } from './palette.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DiagramComponent,\r\n    OverviewComponent,\r\n    PaletteComponent\r\n  ],\r\n  imports: [\r\n  ],\r\n  providers: [\r\n    DataSyncService\r\n  ],\r\n  exports: [\r\n    DiagramComponent,\r\n    OverviewComponent,\r\n    PaletteComponent\r\n  ]\r\n})\r\nexport class GojsAngularModule { }\r\n"]}
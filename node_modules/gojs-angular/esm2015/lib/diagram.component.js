/**
 * @fileoverview added by tsickle
 * Generated from: lib/diagram.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, NgZone, Output, ViewChild } from '@angular/core';
import * as go from 'gojs';
import { NgDiagramHelper } from './ng-diagram-helper';
export class DiagramComponent {
    /**
     * @param {?} zone
     */
    constructor(zone) {
        this.zone = zone;
        /**
         * Link data for diagram. Optional.
         */
        this.linkDataArray = null;
        /**
         * Model data for diagram. Optional.
         */
        this.modelData = null;
        /**
         * Model changed listener function for diagram
         */
        this.modelChangedListener = null;
        /**
         * Whether or not to skip merging app data with GoJS model data (set to true if update is coming from GoJS, false if coming from app-level, usually)
         */
        this.skipsDiagramUpdate = false;
        /**
         * Event emitter -- fires when diagram model changes. Capture this emitted event in parent component
         */
        this.modelChange = new EventEmitter();
        /**
         * The Diagram itself
         */
        this.diagram = null;
        /**
         * An internal flag used to tell ngOnChanges to treat the next sync operation as a Diagram initialization
         */
        this.wasCleared = false;
    }
    /**
     * Initializes diagram / model after view init
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.diagramDiv) {
            throw new Error("diagramDiv is not defined");
        }
        this.diagram = this.initDiagram();
        if (!(this.diagram instanceof go.Diagram)) {
            throw new Error("initDiagram function did not return a go.Diagram");
        }
        // reduces change detection on mouse moves, boosting performance
        NgDiagramHelper.makeMouseMoveRunOutsideAngularZone(this.diagram, this.zone);
        // assign the Diagram's div, which (among many other things) will attach a bunch of listeners to the canvas,
        // using the overridden addEventListener function defined in makeMouseMoveRunOutsideAngularZone
        /** @type {?} */
        const divRef = this.diagramDiv.nativeElement;
        if (divRef === null)
            return;
        this.diagram.div = divRef;
        // initialize the diagram model with the provided node / link / model data
        NgDiagramHelper.initializeModel(this.diagram, this.nodeDataArray, this.linkDataArray, this.modelData);
        // initializer model listener
        NgDiagramHelper.initializeModelChangedListener(this);
    } // end ngAfterViewInit
    // end ngAfterViewInit
    /**
     * If a change has occurred on an \@Input property, merge the app-level changes with GoJS
     * @return {?}
     */
    ngOnChanges() {
        if (!this.diagram || !this.diagram.model || this.skipsDiagramUpdate)
            return;
        // if clear was just called, treat this as initial
        if (this.wasCleared) {
            this.diagram.delayInitialization((/**
             * @return {?}
             */
            () => {
                NgDiagramHelper.mergeAppDataWithModel(this, true);
            }));
            this.wasCleared = false;
        }
        else {
            NgDiagramHelper.mergeAppDataWithModel(this);
        }
    } // end ngOnChanges
    // end ngOnChanges
    /**
     * Clears the diagram of all nodes, links, and model data.
     * Also clears the UndoManager history and clipboard.
     * The next state update will be treated as diagram initialization.
     * @return {?}
     */
    clear() {
        /** @type {?} */
        const diagram = this.diagram;
        if (diagram !== null) {
            diagram.clear();
            this.wasCleared = true;
        }
    } // end clear function
    // end clear function
    /**
     * Set this.diagram.div to null, removing all event listeners
     * @return {?}
     */
    ngOnDestroy() {
        this.diagram.div = null; // removes event listeners
    } // end ngOnDestroy function
}
DiagramComponent.decorators = [
    { type: Component, args: [{
                selector: 'gojs-diagram',
                template: '<div #ngDiagram [className]=divClassName></div>'
            }] }
];
/** @nocollapse */
DiagramComponent.ctorParameters = () => [
    { type: NgZone }
];
DiagramComponent.propDecorators = {
    initDiagram: [{ type: Input }],
    nodeDataArray: [{ type: Input }],
    linkDataArray: [{ type: Input }],
    modelData: [{ type: Input }],
    divClassName: [{ type: Input }],
    skipsDiagramUpdate: [{ type: Input }],
    modelChange: [{ type: Output }],
    diagramDiv: [{ type: ViewChild, args: ['ngDiagram', { static: true },] }]
};
if (false) {
    /**
     * Diagram initialization function. Returns a go.Diagram.
     * Do not initialize model data in this function.
     * @type {?}
     */
    DiagramComponent.prototype.initDiagram;
    /**
     * Node data for diagram
     * @type {?}
     */
    DiagramComponent.prototype.nodeDataArray;
    /**
     * Link data for diagram. Optional.
     * @type {?}
     */
    DiagramComponent.prototype.linkDataArray;
    /**
     * Model data for diagram. Optional.
     * @type {?}
     */
    DiagramComponent.prototype.modelData;
    /**
     * Diagram div class name. Use this name to style your diagram in CSS.
     * @type {?}
     */
    DiagramComponent.prototype.divClassName;
    /**
     * Model changed listener function for diagram
     * @type {?}
     */
    DiagramComponent.prototype.modelChangedListener;
    /**
     * Whether or not to skip merging app data with GoJS model data (set to true if update is coming from GoJS, false if coming from app-level, usually)
     * @type {?}
     */
    DiagramComponent.prototype.skipsDiagramUpdate;
    /**
     * Event emitter -- fires when diagram model changes. Capture this emitted event in parent component
     * @type {?}
     */
    DiagramComponent.prototype.modelChange;
    /**
     * The DIV element holding the Diagram
     * @type {?}
     */
    DiagramComponent.prototype.diagramDiv;
    /**
     * The Diagram itself
     * @type {?}
     */
    DiagramComponent.prototype.diagram;
    /**
     * An internal flag used to tell ngOnChanges to treat the next sync operation as a Diagram initialization
     * @type {?}
     * @private
     */
    DiagramComponent.prototype.wasCleared;
    /** @type {?} */
    DiagramComponent.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * Generated from: lib/palette.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, NgZone, Output, ViewChild } from '@angular/core';
import * as go from 'gojs';
import { NgDiagramHelper } from './ng-diagram-helper';
export class PaletteComponent {
    /**
     * @param {?} zone
     */
    constructor(zone) {
        this.zone = zone;
        /**
         * Link data for palette. Optional.
         */
        this.linkDataArray = null;
        /**
         * Model data for palette. Optional.
         */
        this.modelData = null;
        /**
         * Event emitter -- fires when palette model changes. Capture this emitted event in parent component
         */
        this.modelChange = new EventEmitter();
        /**
         * The Palette itself
         */
        this.palette = null;
    }
    /**
     * Initialize Palette after view init
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.paletteDiv) {
            throw new Error("paletteDiv is not defined");
        }
        this.palette = this.initPalette();
        if (!(this.palette instanceof go.Palette)) {
            throw new Error("initPalette function did not return a go.Palette");
        }
        // reduces change detection on mouse moves, boosting performance
        NgDiagramHelper.makeMouseMoveRunOutsideAngularZone(this.palette, this.zone);
        // assign the Palette's div, which (among many other things) will attach a bunch of listeners to the canvas,
        // using the overridden addEventListener function above
        /** @type {?} */
        const divRef = this.paletteDiv.nativeElement;
        if (divRef == null)
            return;
        this.palette.div = divRef;
        // initialize palette model
        NgDiagramHelper.initializeModel(this.palette, this.nodeDataArray, this.linkDataArray, this.modelData);
    }
    /**
     * If a change has occured on an \@Input property, merge the app-level changes with GoJS
     * @return {?}
     */
    ngOnChanges() {
        if (!this.palette || !this.palette.model)
            return;
        NgDiagramHelper.mergeAppDataWithModel(this);
    } // end ngOnChanges 
    // end ngOnChanges 
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.palette.div = null; // removes event listeners
    }
}
PaletteComponent.decorators = [
    { type: Component, args: [{
                selector: 'gojs-palette',
                template: '<div #ngPalette [className]=divClassName></div>'
            }] }
];
/** @nocollapse */
PaletteComponent.ctorParameters = () => [
    { type: NgZone }
];
PaletteComponent.propDecorators = {
    initPalette: [{ type: Input }],
    nodeDataArray: [{ type: Input }],
    linkDataArray: [{ type: Input }],
    modelData: [{ type: Input }],
    divClassName: [{ type: Input }],
    modelChange: [{ type: Output }],
    paletteDiv: [{ type: ViewChild, args: ['ngPalette', { static: true },] }]
};
if (false) {
    /**
     * Palette initialization function. Returns a go.Palette.
     * Do not initialize model data in this function.
     * @type {?}
     */
    PaletteComponent.prototype.initPalette;
    /**
     * Node data for palette
     * @type {?}
     */
    PaletteComponent.prototype.nodeDataArray;
    /**
     * Link data for palette. Optional.
     * @type {?}
     */
    PaletteComponent.prototype.linkDataArray;
    /**
     * Model data for palette. Optional.
     * @type {?}
     */
    PaletteComponent.prototype.modelData;
    /**
     * Palette div class name. Use this name to style your palette in CSS
     * @type {?}
     */
    PaletteComponent.prototype.divClassName;
    /**
     * Event emitter -- fires when palette model changes. Capture this emitted event in parent component
     * @type {?}
     */
    PaletteComponent.prototype.modelChange;
    /**
     * The DIV element holding the Palette
     * @type {?}
     */
    PaletteComponent.prototype.paletteDiv;
    /**
     * The Palette itself
     * @type {?}
     */
    PaletteComponent.prototype.palette;
    /** @type {?} */
    PaletteComponent.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFsZXR0ZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvcmpvaG4vRG9jdW1lbnRzL0dpdEh1Yi9nb2pzLWFuZ3VsYXIvcHJvamVjdHMvZ29qcy1hbmd1bGFyL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9wYWxldHRlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEcsT0FBTyxLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0IsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBS3RELE1BQU0sT0FBTyxnQkFBZ0I7Ozs7SUF3QjNCLFlBQW1CLElBQVk7UUFBWixTQUFJLEdBQUosSUFBSSxDQUFROzs7O1FBZGYsa0JBQWEsR0FBeUIsSUFBSSxDQUFDOzs7O1FBRTNDLGNBQVMsR0FBa0IsSUFBSSxDQUFDOzs7O1FBSy9CLGdCQUFXLEdBQXFDLElBQUksWUFBWSxFQUFzQixDQUFDOzs7O1FBS2pHLFlBQU8sR0FBc0IsSUFBSSxDQUFDO0lBRUwsQ0FBQzs7Ozs7SUFLOUIsZUFBZTtRQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7U0FDOUM7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNsQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxZQUFZLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUN6QyxNQUFNLElBQUksS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7U0FDckU7UUFFRCxnRUFBZ0U7UUFDaEUsZUFBZSxDQUFDLGtDQUFrQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDOzs7O2NBSXRFLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWE7UUFDNUMsSUFBSSxNQUFNLElBQUksSUFBSTtZQUFFLE9BQU87UUFDM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDO1FBRTFCLDJCQUEyQjtRQUMzQixlQUFlLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN4RyxDQUFDOzs7OztJQUtNLFdBQVc7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUs7WUFBRSxPQUFPO1FBQ2pELGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUMsbUJBQW1COzs7OztJQUdkLFdBQVc7UUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsMEJBQTBCO0lBQ3JELENBQUM7OztZQWxFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLFFBQVEsRUFBRSxpREFBaUQ7YUFDNUQ7Ozs7WUFOb0QsTUFBTTs7OzBCQWF4RCxLQUFLOzRCQUVMLEtBQUs7NEJBRUwsS0FBSzt3QkFFTCxLQUFLOzJCQUVMLEtBQUs7MEJBR0wsTUFBTTt5QkFFTixTQUFTLFNBQUMsV0FBVyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTs7Ozs7Ozs7SUFieEMsdUNBQThDOzs7OztJQUU5Qyx5Q0FBb0Q7Ozs7O0lBRXBELHlDQUEyRDs7Ozs7SUFFM0QscUNBQWdEOzs7OztJQUVoRCx3Q0FBcUM7Ozs7O0lBR3JDLHVDQUF3Rzs7Ozs7SUFFeEcsc0NBQXdFOzs7OztJQUd4RSxtQ0FBeUM7O0lBRTdCLGdDQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgTmdab25lLCBPdXRwdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBnbyBmcm9tICdnb2pzJztcclxuaW1wb3J0IHsgTmdEaWFncmFtSGVscGVyIH0gZnJvbSAnLi9uZy1kaWFncmFtLWhlbHBlcic7XHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZ29qcy1wYWxldHRlJyxcclxuICB0ZW1wbGF0ZTogJzxkaXYgI25nUGFsZXR0ZSBbY2xhc3NOYW1lXT1kaXZDbGFzc05hbWU+PC9kaXY+J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUGFsZXR0ZUNvbXBvbmVudCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIFBhbGV0dGUgaW5pdGlhbGl6YXRpb24gZnVuY3Rpb24uIFJldHVybnMgYSBnby5QYWxldHRlLlxyXG4gICAqIERvIG5vdCBpbml0aWFsaXplIG1vZGVsIGRhdGEgaW4gdGhpcyBmdW5jdGlvbi5cclxuICAgKi9cclxuICBASW5wdXQoKSBwdWJsaWMgaW5pdFBhbGV0dGU6ICgpID0+IGdvLlBhbGV0dGU7XHJcbiAgLyoqIE5vZGUgZGF0YSBmb3IgcGFsZXR0ZSAqL1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBub2RlRGF0YUFycmF5OiBBcnJheTxnby5PYmplY3REYXRhPjtcclxuICAvKiogTGluayBkYXRhIGZvciBwYWxldHRlLiBPcHRpb25hbC4gKi9cclxuICBASW5wdXQoKSBwdWJsaWMgbGlua0RhdGFBcnJheTogQXJyYXk8Z28uT2JqZWN0RGF0YT4gPSBudWxsO1xyXG4gIC8qKiBNb2RlbCBkYXRhIGZvciBwYWxldHRlLiBPcHRpb25hbC4gKi9cclxuICBASW5wdXQoKSBwdWJsaWMgbW9kZWxEYXRhOiBnby5PYmplY3REYXRhID0gbnVsbDtcclxuICAvKiogUGFsZXR0ZSBkaXYgY2xhc3MgbmFtZS4gVXNlIHRoaXMgbmFtZSB0byBzdHlsZSB5b3VyIHBhbGV0dGUgaW4gQ1NTICovXHJcbiAgQElucHV0KCkgcHVibGljIGRpdkNsYXNzTmFtZTogc3RyaW5nO1xyXG5cclxuICAvKiogRXZlbnQgZW1pdHRlciAtLSBmaXJlcyB3aGVuIHBhbGV0dGUgbW9kZWwgY2hhbmdlcy4gQ2FwdHVyZSB0aGlzIGVtaXR0ZWQgZXZlbnQgaW4gcGFyZW50IGNvbXBvbmVudCAqL1xyXG4gIEBPdXRwdXQoKSBwdWJsaWMgbW9kZWxDaGFuZ2U6IEV2ZW50RW1pdHRlcjxnby5JbmNyZW1lbnRhbERhdGE+ID0gbmV3IEV2ZW50RW1pdHRlcjxnby5JbmNyZW1lbnRhbERhdGE+KCk7XHJcbiAgLyoqIFRoZSBESVYgZWxlbWVudCBob2xkaW5nIHRoZSBQYWxldHRlICovXHJcbiAgQFZpZXdDaGlsZCgnbmdQYWxldHRlJywgeyBzdGF0aWM6IHRydWUgfSkgcHVibGljIHBhbGV0dGVEaXY6IEVsZW1lbnRSZWY7XHJcblxyXG4gIC8qKiBUaGUgUGFsZXR0ZSBpdHNlbGYgKi9cclxuICBwdWJsaWMgcGFsZXR0ZTogZ28uUGFsZXR0ZSB8IG51bGwgPSBudWxsO1xyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgem9uZTogTmdab25lKSB7ICB9IFxyXG5cclxuICAvKipcclxuICAgKiBJbml0aWFsaXplIFBhbGV0dGUgYWZ0ZXIgdmlldyBpbml0XHJcbiAgICovXHJcbiAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIGlmICghdGhpcy5wYWxldHRlRGl2KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInBhbGV0dGVEaXYgaXMgbm90IGRlZmluZWRcIik7XHJcbiAgICB9XHJcbiAgICB0aGlzLnBhbGV0dGUgPSB0aGlzLmluaXRQYWxldHRlKCk7XHJcbiAgICBpZiAoISh0aGlzLnBhbGV0dGUgaW5zdGFuY2VvZiBnby5QYWxldHRlKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbml0UGFsZXR0ZSBmdW5jdGlvbiBkaWQgbm90IHJldHVybiBhIGdvLlBhbGV0dGVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmVkdWNlcyBjaGFuZ2UgZGV0ZWN0aW9uIG9uIG1vdXNlIG1vdmVzLCBib29zdGluZyBwZXJmb3JtYW5jZVxyXG4gICAgTmdEaWFncmFtSGVscGVyLm1ha2VNb3VzZU1vdmVSdW5PdXRzaWRlQW5ndWxhclpvbmUodGhpcy5wYWxldHRlLCB0aGlzLnpvbmUpO1xyXG5cclxuICAgIC8vIGFzc2lnbiB0aGUgUGFsZXR0ZSdzIGRpdiwgd2hpY2ggKGFtb25nIG1hbnkgb3RoZXIgdGhpbmdzKSB3aWxsIGF0dGFjaCBhIGJ1bmNoIG9mIGxpc3RlbmVycyB0byB0aGUgY2FudmFzLFxyXG4gICAgLy8gdXNpbmcgdGhlIG92ZXJyaWRkZW4gYWRkRXZlbnRMaXN0ZW5lciBmdW5jdGlvbiBhYm92ZVxyXG4gICAgY29uc3QgZGl2UmVmID0gdGhpcy5wYWxldHRlRGl2Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICBpZiAoZGl2UmVmID09IG51bGwpIHJldHVybjtcclxuICAgIHRoaXMucGFsZXR0ZS5kaXYgPSBkaXZSZWY7XHJcblxyXG4gICAgLy8gaW5pdGlhbGl6ZSBwYWxldHRlIG1vZGVsXHJcbiAgICBOZ0RpYWdyYW1IZWxwZXIuaW5pdGlhbGl6ZU1vZGVsKHRoaXMucGFsZXR0ZSwgdGhpcy5ub2RlRGF0YUFycmF5LCB0aGlzLmxpbmtEYXRhQXJyYXksIHRoaXMubW9kZWxEYXRhKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIElmIGEgY2hhbmdlIGhhcyBvY2N1cmVkIG9uIGFuIEBJbnB1dCBwcm9wZXJ0eSwgbWVyZ2UgdGhlIGFwcC1sZXZlbCBjaGFuZ2VzIHdpdGggR29KU1xyXG4gICAqL1xyXG4gIHB1YmxpYyBuZ09uQ2hhbmdlcygpIHtcclxuICAgIGlmICghdGhpcy5wYWxldHRlIHx8ICF0aGlzLnBhbGV0dGUubW9kZWwpIHJldHVybjtcclxuICAgIE5nRGlhZ3JhbUhlbHBlci5tZXJnZUFwcERhdGFXaXRoTW9kZWwodGhpcyk7XHJcbiAgfSAvLyBlbmQgbmdPbkNoYW5nZXMgXHJcbiAgXHJcblxyXG4gIHB1YmxpYyBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMucGFsZXR0ZS5kaXYgPSBudWxsOyAvLyByZW1vdmVzIGV2ZW50IGxpc3RlbmVyc1xyXG4gIH1cclxuXHJcbn1cclxuIl19
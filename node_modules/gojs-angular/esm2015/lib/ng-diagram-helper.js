/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-diagram-helper.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as go from "gojs";
/**
 * An interface to allow methods defined below to accept Palette or Diagram Components,
 * without requiring DiagramComponent or PaletteComponent directly in this file
 * (that would create a circular dependency)
 * @record
 */
export function IDiagramOrPaletteComponent() { }
if (false) {
    /** @type {?} */
    IDiagramOrPaletteComponent.prototype.modelChange;
    /** @type {?} */
    IDiagramOrPaletteComponent.prototype.zone;
    /** @type {?} */
    IDiagramOrPaletteComponent.prototype.nodeDataArray;
    /** @type {?} */
    IDiagramOrPaletteComponent.prototype.linkDataArray;
    /** @type {?} */
    IDiagramOrPaletteComponent.prototype.modelData;
}
/**
 * Defines some shared helper static functions, used in Diagram / Palette / Overview Components
 */
export class NgDiagramHelper {
    constructor() { }
    /**
     * Ensures mousemove event listeners on a diagram's canvas are run outside NgZone.
     * This way, change detection isn't triggered on each mousemove, improving performance.
     *
     * If some state-alteration must happen on a mousemove event inside the diagram, use zone.run() to make sure the event triggers angular change detection.
     * Used by DiagramComponent, PaletteComponent, and OverviewComponent in their ngAfterViewInit lifecycle hooks
     * @param {?} diagram
     * @param {?} zone
     * @return {?}
     */
    static makeMouseMoveRunOutsideAngularZone(diagram, zone) {
        diagram.addEventListener = (/**
         * @param {?} DOMElement
         * @param {?} name
         * @param {?} listener
         * @param {?} capture
         * @return {?}
         */
        (DOMElement, name, listener, capture) => {
            /** @type {?} */
            const superAddEventListener = go.Diagram.prototype.addEventListener;
            if (name === 'mousemove') {
                zone.runOutsideAngular((/**
                 * @return {?}
                 */
                () => superAddEventListener.call(this, DOMElement, name, listener, capture)));
            }
            else {
                zone.run((/**
                 * @return {?}
                 */
                () => {
                    superAddEventListener.call(this, DOMElement, name, listener, capture);
                }));
            }
        });
    }
    /**
     * Initialize a given diagram's model with given node / link / model data
     * @param {?} diagram
     * @param {?} nodeDataArray
     * @param {?} linkDataArray
     * @param {?} modelData
     * @return {?}
     */
    static initializeModel(diagram, nodeDataArray, linkDataArray, modelData) {
        diagram.delayInitialization((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const model = diagram.model;
            model.commit((/**
             * @param {?} m
             * @return {?}
             */
            (m) => {
                if (modelData) {
                    m.assignAllDataProperties(m.modelData, modelData);
                }
                m.mergeNodeDataArray(m.cloneDeep(nodeDataArray));
                if (linkDataArray && m instanceof go.GraphLinksModel) {
                    m.mergeLinkDataArray(m.cloneDeep(linkDataArray));
                }
            }), null);
        }));
    }
    /**
     * Initialize the model changed listener for the Palette / Diagram of a given compoennt; ensure it runs inside the component's ngZone.
     * Those changes will be emitted through a the component's modelChange EventEmitter.
     * @param {?} component
     * @return {?}
     */
    static initializeModelChangedListener(component) {
        /** @type {?} */
        var diagram = null;
        if (!(component.hasOwnProperty("diagram")) && !(component.hasOwnProperty("palette")))
            return;
        if (component.hasOwnProperty("diagram"))
            diagram = component["diagram"];
        if (component.hasOwnProperty("palette"))
            diagram = component["palette"];
        component.modelChangedListener = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.isTransactionFinished && e.model && !e.model.isReadOnly && component.modelChange) {
                // this must be done within a NgZone.run block, so changes are detected in the parent component
                component.zone.run((/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    const dataChanges = (/** @type {?} */ (e.model)).toIncrementalData(e);
                    if (dataChanges !== null)
                        component.modelChange.emit(dataChanges);
                }));
            }
        });
        diagram.addModelChangedListener(component.modelChangedListener);
    }
    /**
     * Merge the app-level node / link / model data of a supplied Diagram|Palette Component with its underlying Diagram|Palette model data
     * @param {?} component
     * @param {?=} isInit Whether or not to treat this update as a Diagram initialization
     * @return {?}
     */
    static mergeAppDataWithModel(component, isInit) {
        /** @type {?} */
        var diagram = null;
        if (component.hasOwnProperty("diagram"))
            diagram = component["diagram"];
        if (component.hasOwnProperty("palette"))
            diagram = component["palette"];
        diagram.model.commit((/**
         * @param {?} m
         * @return {?}
         */
        (m) => {
            if (isInit)
                diagram.model.modelData = {};
            // update modelData first, in case bindings on nodes / links depend on model data
            diagram.model.assignAllDataProperties(diagram.model.modelData, component.modelData);
            // merge node / link data
            if (isInit)
                diagram.model.nodeDataArray = [];
            diagram.model.mergeNodeDataArray(component.nodeDataArray);
            if (component.linkDataArray && diagram.model instanceof go.GraphLinksModel) {
                if (isInit)
                    diagram.model.linkDataArray = [];
                diagram.model.mergeLinkDataArray(component.linkDataArray);
            }
        }), isInit ? null : 'update data');
    }
}
//# sourceMappingURL=data:application/json;base64,
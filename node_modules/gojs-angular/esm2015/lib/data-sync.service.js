/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-sync.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as go from 'gojs';
import produce from "immer";
export class DataSyncService {
    /**
     * Sync a node data array with a set of changes
     * @param {?} changes The set of changes to the GoJS model
     * @param {?} nodeData The node data array to merge these changes with
     * @param {?=} model Required if you have defined your model.nodeKeyProperty to be something other than 'key'
     * @return {?} A node data array, merged with the changes
     */
    static syncNodeData(changes, nodeData, model) {
        if (!changes)
            return nodeData;
        if (!changes.modifiedNodeData && !changes.insertedNodeKeys && !changes.removedNodeKeys)
            return nodeData;
        // maintain a map of modified nodes for fast lookup during insertion
        /** @type {?} */
        const modifiedNodesMap = new go.Map();
        // nodeData is immutable, modify it using the immer package's "produce" function (creates new array)
        /** @type {?} */
        var newNodeDataArray = produce(nodeData, (/**
         * @param {?} draft
         * @return {?}
         */
        (draft) => {
            // account for modified node data
            if (changes.modifiedNodeData) {
                changes.modifiedNodeData.forEach((/**
                 * @param {?} nd
                 * @return {?}
                 */
                (nd) => {
                    // Get the value of the node key property checking wether is a function or a string
                    /** @type {?} */
                    const key = model ? model.getKeyForNodeData(nd) : nd['key'];
                    modifiedNodesMap.set(key, nd);
                    for (let i = 0; i < nodeData.length; i++) {
                        /** @type {?} */
                        const ndEntry = nodeData[i];
                        /** @type {?} */
                        const keyNdEntry = model ? model.getKeyForNodeData(ndEntry) : ndEntry['key'];
                        if (keyNdEntry === key) {
                            draft[i] = nd;
                        }
                    }
                }));
            }
            // account for inserted node data
            if (changes.insertedNodeKeys) {
                changes.insertedNodeKeys.forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                (key) => {
                    /** @type {?} */
                    const nd = modifiedNodesMap.get(key);
                    if (nd) {
                        draft.push(nd);
                    }
                }));
            }
            // account for removed node data
            if (changes.removedNodeKeys) {
                return draft.filter((/**
                 * @param {?} nd
                 * @return {?}
                 */
                (nd) => {
                    /** @type {?} */
                    const key = model ? model.getKeyForNodeData(nd) : nd['key'];
                    if (changes.removedNodeKeys.includes(key)) {
                        return false;
                    }
                    return true;
                }));
            }
        }));
        return newNodeDataArray;
    }
    /**
     * Sync a link data array with a set of changes
     * @param {?} changes The set of changes to the GoJS model
     * @param {?} linkData The link data array to merge these changes with
     * @param {?=} model Required if you have defined your model.linkKeyProperty to be something other than 'key'
     * @return {?} A link data array, merged with the changes
     */
    static syncLinkData(changes, linkData, model) {
        if (!changes)
            return linkData;
        if (!changes.modifiedLinkData && !changes.insertedLinkKeys && !changes.removedLinkKeys)
            return linkData;
        // maintain a map of modified nodes for fast lookup during insertion
        /** @type {?} */
        const modifiedLinksMap = new go.Map();
        // linkData is immutable, modify it using the immer package's "produce" function (creates new array)
        linkData = produce(linkData, (/**
         * @param {?} draft
         * @return {?}
         */
        draft => {
            // account for modified link data
            if (changes.modifiedLinkData) {
                changes.modifiedLinkData.forEach((/**
                 * @param {?} ld
                 * @return {?}
                 */
                (ld) => {
                    // Get the value of the link key
                    /** @type {?} */
                    const key = model ? model.getKeyForLinkData(ld) : ld['key'];
                    modifiedLinksMap.set(key, ld);
                    for (let i = 0; i < linkData.length; i++) {
                        /** @type {?} */
                        const ldEntry = linkData[i];
                        /** @type {?} */
                        const keyLdEntry = model ? model.getKeyForLinkData(ldEntry) : ldEntry['key'];
                        if (keyLdEntry === key) {
                            draft[i] = ld;
                        }
                    }
                }));
            }
            // account for inserted link data
            if (changes.insertedLinkKeys) {
                changes.insertedLinkKeys.forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                (key) => {
                    /** @type {?} */
                    const nd = modifiedLinksMap.get(key);
                    if (nd) {
                        draft.push(nd);
                    }
                }));
            }
            // account for removed link data
            if (changes.removedLinkKeys) {
                return draft.filter((/**
                 * @param {?} ld
                 * @return {?}
                 */
                (ld) => {
                    /** @type {?} */
                    const key = model ? model.getKeyForLinkData(ld) : ld['key'];
                    if (changes.removedLinkKeys.includes(key)) {
                        return false;
                    }
                    return true;
                }));
            }
        }));
        return linkData;
    }
    /**
     * Sync modelData with a set of changes
     * @param {?} changes The set of changes to the GoJS model
     * @param {?} modelData The modelData to merge these changes with
     * @return {?} A modelData object, merged with the changes
     */
    static syncModelData(changes, modelData) {
        if (!changes)
            return modelData;
        if (!changes.modelData)
            return modelData;
        if (changes.modelData) {
            return changes.modelData;
        }
    }
}
DataSyncService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,
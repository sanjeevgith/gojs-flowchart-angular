/**
 * @fileoverview added by tsickle
 * Generated from: lib/overview.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, NgZone, ViewChild } from '@angular/core';
import * as go from 'gojs';
import { NgDiagramHelper } from "./ng-diagram-helper";
export class OverviewComponent {
    /**
     * @param {?} zone
     */
    constructor(zone) {
        this.zone = zone;
        /**
         * The Diagram to observe with the Overview
         */
        this.observedDiagram = null;
        /**
         * The Overview itself
         */
        this.overview = null;
    }
    /**
     * Initialize the overview
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.overviewDiv) {
            throw new Error("overviewDiv is not defined");
        }
        if (this.initOverview) {
            this.overview = this.initOverview();
            if (!(this.overview instanceof go.Overview)) {
                throw new Error("initOverview function did not return a go.Overview");
            }
        }
        else {
            this.overview = new go.Overview();
            this.overview.contentAlignment = go.Spot.Center;
        }
        // reduces change detection on mouse moves, boosting performance
        NgDiagramHelper.makeMouseMoveRunOutsideAngularZone(this.overview, this.zone);
        this.overview.div = this.overviewDiv.nativeElement;
    }
    /**
     * Only update when the observed diagram changes
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.overview)
            return;
        if (changes && changes.observedDiagram && changes.observedDiagram.currentValue !== changes.observedDiagram.previousValue) {
            this.overview.observed = changes.observedDiagram.currentValue;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.overview.div = null; // removes event listeners
    }
}
OverviewComponent.decorators = [
    { type: Component, args: [{
                selector: 'gojs-overview',
                template: '<div #ngOverview [className]=divClassName></div>'
            }] }
];
/** @nocollapse */
OverviewComponent.ctorParameters = () => [
    { type: NgZone }
];
OverviewComponent.propDecorators = {
    initOverview: [{ type: Input }],
    divClassName: [{ type: Input }],
    observedDiagram: [{ type: Input }],
    overviewDiv: [{ type: ViewChild, args: ['ngOverview', { static: true },] }]
};
if (false) {
    /**
     * The function used to initialize and return the Overview
     * @type {?}
     */
    OverviewComponent.prototype.initOverview;
    /**
     * The div class name that holds the Overview. Use this name to style your Overview in CSS.
     * @type {?}
     */
    OverviewComponent.prototype.divClassName;
    /**
     * The Diagram to observe with the Overview
     * @type {?}
     */
    OverviewComponent.prototype.observedDiagram;
    /** @type {?} */
    OverviewComponent.prototype.overviewDiv;
    /**
     * The Overview itself
     * @type {?}
     */
    OverviewComponent.prototype.overview;
    /** @type {?} */
    OverviewComponent.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcnZpZXcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL3Jqb2huL0RvY3VtZW50cy9HaXRIdWIvZ29qcy1hbmd1bGFyL3Byb2plY3RzL2dvanMtYW5ndWxhci9zcmMvIiwic291cmNlcyI6WyJsaWIvb3ZlcnZpZXcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBaUIsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9GLE9BQU8sS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNCLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQU10RCxNQUFNLE9BQU8saUJBQWlCOzs7O0lBYzVCLFlBQW1CLElBQVk7UUFBWixTQUFJLEdBQUosSUFBSSxDQUFROzs7O1FBUGYsb0JBQWUsR0FBZSxJQUFJLENBQUM7Ozs7UUFLNUMsYUFBUSxHQUF1QixJQUFJLENBQUM7SUFFUixDQUFDOzs7OztJQUs3QixlQUFlO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztTQUMvQztRQUNELElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUNwQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxZQUFZLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDM0MsTUFBTSxJQUFJLEtBQUssQ0FBQyxvREFBb0QsQ0FBQyxDQUFDO2FBQ3ZFO1NBQ0Y7YUFBTTtZQUNMLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNqRDtRQUVELGdFQUFnRTtRQUNoRSxlQUFlLENBQUMsa0NBQWtDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFN0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7SUFDckQsQ0FBQzs7Ozs7O0lBTU0sV0FBVyxDQUFDLE9BQXNCO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUTtZQUFFLE9BQU87UUFDM0IsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLGVBQWUsSUFBSSxPQUFPLENBQUMsZUFBZSxDQUFDLFlBQVksS0FBSyxPQUFPLENBQUMsZUFBZSxDQUFDLGFBQWEsRUFBRTtZQUN4SCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQztTQUMvRDtJQUNILENBQUM7Ozs7SUFFTSxXQUFXO1FBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLDBCQUEwQjtJQUN0RCxDQUFDOzs7WUF4REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2dCQUN6QixRQUFRLEVBQUUsa0RBQWtEO2FBQzdEOzs7O1lBUHNDLE1BQU07OzsyQkFXMUMsS0FBSzsyQkFFTCxLQUFLOzhCQUVMLEtBQUs7MEJBRUwsU0FBUyxTQUFDLFlBQVksRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Ozs7Ozs7SUFOekMseUNBQWdEOzs7OztJQUVoRCx5Q0FBcUM7Ozs7O0lBRXJDLDRDQUFtRDs7SUFFbkQsd0NBQTBFOzs7OztJQUcxRSxxQ0FBMkM7O0lBRS9CLGlDQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE5nWm9uZSwgU2ltcGxlQ2hhbmdlcywgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIGdvIGZyb20gJ2dvanMnO1xyXG5pbXBvcnQgeyBOZ0RpYWdyYW1IZWxwZXIgfSBmcm9tIFwiLi9uZy1kaWFncmFtLWhlbHBlclwiO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdnb2pzLW92ZXJ2aWV3JyxcclxuICB0ZW1wbGF0ZTogJzxkaXYgI25nT3ZlcnZpZXcgW2NsYXNzTmFtZV09ZGl2Q2xhc3NOYW1lPjwvZGl2PidcclxufSlcclxuZXhwb3J0IGNsYXNzIE92ZXJ2aWV3Q29tcG9uZW50IHtcclxuXHJcbiAgLyoqIFRoZSBmdW5jdGlvbiB1c2VkIHRvIGluaXRpYWxpemUgYW5kIHJldHVybiB0aGUgT3ZlcnZpZXcgKi8gXHJcbiAgQElucHV0KCkgcHVibGljIGluaXRPdmVydmlldzogKCkgPT4gZ28uT3ZlcnZpZXc7XHJcbiAgLyoqIFRoZSBkaXYgY2xhc3MgbmFtZSB0aGF0IGhvbGRzIHRoZSBPdmVydmlldy4gVXNlIHRoaXMgbmFtZSB0byBzdHlsZSB5b3VyIE92ZXJ2aWV3IGluIENTUy4gKi9cclxuICBASW5wdXQoKSBwdWJsaWMgZGl2Q2xhc3NOYW1lOiBzdHJpbmc7XHJcbiAgLyoqIFRoZSBEaWFncmFtIHRvIG9ic2VydmUgd2l0aCB0aGUgT3ZlcnZpZXcgKi9cclxuICBASW5wdXQoKSBwdWJsaWMgb2JzZXJ2ZWREaWFncmFtOiBnby5EaWFncmFtID0gbnVsbDtcclxuXHJcbiAgQFZpZXdDaGlsZCgnbmdPdmVydmlldycsIHsgc3RhdGljOiB0cnVlIH0pIHB1YmxpYyBvdmVydmlld0RpdjogRWxlbWVudFJlZjtcclxuXHJcbiAgLyoqIFRoZSBPdmVydmlldyBpdHNlbGYgICovXHJcbiAgcHVibGljIG92ZXJ2aWV3OiBnby5PdmVydmlldyB8IG51bGwgPSBudWxsO1xyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgem9uZTogTmdab25lKSB7IH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSB0aGUgb3ZlcnZpZXdcclxuICAgKi9cclxuICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgaWYgKCF0aGlzLm92ZXJ2aWV3RGl2KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIm92ZXJ2aWV3RGl2IGlzIG5vdCBkZWZpbmVkXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuaW5pdE92ZXJ2aWV3KSB7XHJcbiAgICAgIHRoaXMub3ZlcnZpZXcgPSB0aGlzLmluaXRPdmVydmlldygpO1xyXG4gICAgICBpZiAoISh0aGlzLm92ZXJ2aWV3IGluc3RhbmNlb2YgZ28uT3ZlcnZpZXcpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW5pdE92ZXJ2aWV3IGZ1bmN0aW9uIGRpZCBub3QgcmV0dXJuIGEgZ28uT3ZlcnZpZXdcIik7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMub3ZlcnZpZXcgPSBuZXcgZ28uT3ZlcnZpZXcoKTtcclxuICAgICAgdGhpcy5vdmVydmlldy5jb250ZW50QWxpZ25tZW50ID0gZ28uU3BvdC5DZW50ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmVkdWNlcyBjaGFuZ2UgZGV0ZWN0aW9uIG9uIG1vdXNlIG1vdmVzLCBib29zdGluZyBwZXJmb3JtYW5jZVxyXG4gICAgTmdEaWFncmFtSGVscGVyLm1ha2VNb3VzZU1vdmVSdW5PdXRzaWRlQW5ndWxhclpvbmUodGhpcy5vdmVydmlldywgdGhpcy56b25lKTtcclxuXHJcbiAgICB0aGlzLm92ZXJ2aWV3LmRpdiA9IHRoaXMub3ZlcnZpZXdEaXYubmF0aXZlRWxlbWVudDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE9ubHkgdXBkYXRlIHdoZW4gdGhlIG9ic2VydmVkIGRpYWdyYW0gY2hhbmdlc1xyXG4gICAqIEBwYXJhbSBjaGFuZ2VzXHJcbiAgICovXHJcbiAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgIGlmICghdGhpcy5vdmVydmlldykgcmV0dXJuO1xyXG4gICAgaWYgKGNoYW5nZXMgJiYgY2hhbmdlcy5vYnNlcnZlZERpYWdyYW0gJiYgY2hhbmdlcy5vYnNlcnZlZERpYWdyYW0uY3VycmVudFZhbHVlICE9PSBjaGFuZ2VzLm9ic2VydmVkRGlhZ3JhbS5wcmV2aW91c1ZhbHVlKSB7XHJcbiAgICAgIHRoaXMub3ZlcnZpZXcub2JzZXJ2ZWQgPSBjaGFuZ2VzLm9ic2VydmVkRGlhZ3JhbS5jdXJyZW50VmFsdWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLm92ZXJ2aWV3LmRpdiA9IG51bGw7IC8vIHJlbW92ZXMgZXZlbnQgbGlzdGVuZXJzXHJcbiAgfVxyXG5cclxufVxyXG4iXX0=
{"version":3,"file":"gojs-angular.js","sources":["../../../projects/gojs-angular/src/lib/ng-diagram-helper.ts","../../../projects/gojs-angular/src/lib/diagram.component.ts","../../../projects/gojs-angular/src/lib/palette.component.ts","../../../projects/gojs-angular/src/lib/overview.component.ts","../../../projects/gojs-angular/src/lib/data-sync.service.ts","../../../projects/gojs-angular/src/lib/gojs-angular.module.ts"],"sourcesContent":["import { NgZone } from \"@angular/core\";\r\nimport { EventEmitter } from \"events\";\r\nimport * as go from \"gojs\";\r\nimport { DiagramComponent } from \"./diagram.component\";\r\n\r\n/**\r\n * An interface to allow methods defined below to accept Palette or Diagram Components,\r\n * without requiring DiagramComponent or PaletteComponent directly in this file\r\n * (that would create a circular dependency)\r\n */\r\nexport interface IDiagramOrPaletteComponent {\r\n  modelChange: EventEmitter<go.IncrementalData>,\r\n  zone: NgZone,\r\n  nodeDataArray: Array<go.ObjectData>,\r\n  linkDataArray: Array<go.ObjectData>,\r\n  modelData: go.ObjectData\r\n}\r\n\r\n/**\r\n * Defines some shared helper static functions, used in Diagram / Palette / Overview Components\r\n */\r\nexport class NgDiagramHelper{\r\n  constructor() {}\r\n\r\n  /**\r\n   * Ensures mousemove event listeners on a diagram's canvas are run outside NgZone.\r\n   * This way, change detection isn't triggered on each mousemove, improving performance.\r\n   *\r\n   * If some state-alteration must happen on a mousemove event inside the diagram, use zone.run() to make sure the event triggers angular change detection.\r\n   * Used by DiagramComponent, PaletteComponent, and OverviewComponent in their ngAfterViewInit lifecycle hooks\r\n   * @param diagram\r\n   * @param zone\r\n   */\r\n  public static makeMouseMoveRunOutsideAngularZone(diagram: go.Diagram, zone: NgZone) {\r\n    diagram.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialize a given diagram's model with given node / link / model data\r\n   * @param diagram\r\n   * @param nodeDataArray\r\n   * @param linkDataArray\r\n   * @param modelData\r\n   */\r\n  public static initializeModel(diagram: go.Diagram | go.Palette, nodeDataArray: Array<go.ObjectData>, linkDataArray: Array<go.ObjectData>, modelData: go.ObjectData) {\r\n    diagram.delayInitialization(() => {\r\n      const model = diagram.model;\r\n      model.commit((m: go.Model) => {\r\n        if (modelData) {\r\n          m.assignAllDataProperties(m.modelData, modelData);\r\n        }\r\n        m.mergeNodeDataArray(m.cloneDeep(nodeDataArray));\r\n        if (linkDataArray && m instanceof go.GraphLinksModel) {\r\n          m.mergeLinkDataArray(m.cloneDeep(linkDataArray));\r\n        }\r\n      }, null);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize the model changed listener for the Palette / Diagram of a given compoennt; ensure it runs inside the component's ngZone.\r\n   * Those changes will be emitted through a the component's modelChange EventEmitter.\r\n   * @param component\r\n   */\r\n  public static initializeModelChangedListener(component: DiagramComponent) {\r\n    var diagram = null;\r\n    if (!(component.hasOwnProperty(\"diagram\")) && !(component.hasOwnProperty(\"palette\"))) return;\r\n    if (component.hasOwnProperty(\"diagram\")) diagram = component[\"diagram\"];\r\n    if (component.hasOwnProperty(\"palette\")) diagram = component[\"palette\"];\r\n    component.modelChangedListener = (e: go.ChangedEvent) => {\r\n      if (e.isTransactionFinished && e.model && !e.model.isReadOnly && component.modelChange) {\r\n        // this must be done within a NgZone.run block, so changes are detected in the parent component\r\n        component.zone.run(() => {\r\n          const dataChanges = e.model!.toIncrementalData(e);\r\n          if (dataChanges !== null) component.modelChange.emit(dataChanges);\r\n        });\r\n      }\r\n    };\r\n    diagram.addModelChangedListener(component.modelChangedListener);\r\n  }\r\n\r\n  /**\r\n   * Merge the app-level node / link / model data of a supplied Diagram|Palette Component with its underlying Diagram|Palette model data\r\n   * @param component\r\n   * @param isInit Whether or not to treat this update as a Diagram initialization\r\n   */\r\n  public static mergeAppDataWithModel(component: IDiagramOrPaletteComponent, isInit?: boolean) {\r\n    var diagram = null;\r\n    if (component.hasOwnProperty(\"diagram\")) diagram = component[\"diagram\"];\r\n    if (component.hasOwnProperty(\"palette\")) diagram = component[\"palette\"];\r\n\r\n    diagram.model.commit((m: go.Model) => {\r\n      if (isInit) diagram.model.modelData = {};\r\n      // update modelData first, in case bindings on nodes / links depend on model data\r\n      diagram.model.assignAllDataProperties(diagram.model.modelData, component.modelData);\r\n      // merge node / link data\r\n      if (isInit) diagram.model.nodeDataArray = [];\r\n      diagram.model.mergeNodeDataArray(component.nodeDataArray);\r\n      if (component.linkDataArray && diagram.model instanceof go.GraphLinksModel) {\r\n        if (isInit) diagram.model.linkDataArray = [];\r\n        diagram.model.mergeLinkDataArray(component.linkDataArray);\r\n      }\r\n    }, isInit ? null : 'update data');\r\n\r\n  }\r\n\r\n}\r\n","import { Component, ElementRef, EventEmitter, Input, NgZone, Output, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\nimport { NgDiagramHelper } from './ng-diagram-helper';\r\n\r\n@Component({\r\n  selector: 'gojs-diagram',\r\n  template: '<div #ngDiagram [className]=divClassName></div>'\r\n})\r\nexport class DiagramComponent {\r\n\r\n  /**\r\n   * Diagram initialization function. Returns a go.Diagram.\r\n   * Do not initialize model data in this function.\r\n   */\r\n  @Input() public initDiagram: () => go.Diagram;\r\n  /**  Node data for diagram */\r\n  @Input() public nodeDataArray: Array<go.ObjectData>;\r\n  /**  Link data for diagram. Optional. */\r\n  @Input() public linkDataArray: Array<go.ObjectData> = null;\r\n  /** Model data for diagram. Optional. */\r\n  @Input() public modelData: go.ObjectData = null;\r\n  /** Diagram div class name. Use this name to style your diagram in CSS. */\r\n  @Input() public divClassName: string;\r\n  /** Model changed listener function for diagram */\r\n  public modelChangedListener: ((e: go.ChangedEvent) => void) | null = null;\r\n  /** Whether or not to skip merging app data with GoJS model data (set to true if update is coming from GoJS, false if coming from app-level, usually) */\r\n  @Input() public skipsDiagramUpdate: boolean = false;\r\n  /** Event emitter -- fires when diagram model changes. Capture this emitted event in parent component */\r\n  @Output() public modelChange: EventEmitter<go.IncrementalData> = new EventEmitter<go.IncrementalData>();\r\n  /** The DIV element holding the Diagram */\r\n  @ViewChild('ngDiagram', { static: true }) public diagramDiv: ElementRef;\r\n  /** The Diagram itself */\r\n  public diagram: go.Diagram = null;\r\n  /** An internal flag used to tell ngOnChanges to treat the next sync operation as a Diagram initialization */\r\n  private wasCleared = false;\r\n\r\n  constructor(public zone: NgZone) {  }\r\n\r\n  /**\r\n   * Initializes diagram / model after view init\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.diagramDiv) {\r\n      throw new Error(\"diagramDiv is not defined\");\r\n    }\r\n    this.diagram = this.initDiagram();\r\n    if (!(this.diagram instanceof go.Diagram)) {\r\n      throw new Error(\"initDiagram function did not return a go.Diagram\");\r\n    }\r\n\r\n    // reduces change detection on mouse moves, boosting performance\r\n    NgDiagramHelper.makeMouseMoveRunOutsideAngularZone(this.diagram, this.zone);\r\n\r\n    // assign the Diagram's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n    // using the overridden addEventListener function defined in makeMouseMoveRunOutsideAngularZone\r\n    const divRef = this.diagramDiv.nativeElement;\r\n    if (divRef === null) return;\r\n    this.diagram.div = divRef;\r\n\r\n    // initialize the diagram model with the provided node / link / model data\r\n    NgDiagramHelper.initializeModel(this.diagram, this.nodeDataArray, this.linkDataArray, this.modelData);\r\n    // initializer model listener\r\n    NgDiagramHelper.initializeModelChangedListener(this);\r\n  } // end ngAfterViewInit\r\n\r\n  /**\r\n   * If a change has occurred on an @Input property, merge the app-level changes with GoJS\r\n   */\r\n  public ngOnChanges() {\r\n    if (!this.diagram || !this.diagram.model || this.skipsDiagramUpdate) return;\r\n    // if clear was just called, treat this as initial\r\n    if (this.wasCleared) {\r\n      this.diagram.delayInitialization(() => {\r\n        NgDiagramHelper.mergeAppDataWithModel(this, true);\r\n      });\r\n      this.wasCleared = false;\r\n    } else {\r\n      NgDiagramHelper.mergeAppDataWithModel(this);\r\n    }\r\n  } // end ngOnChanges\r\n\r\n  /**\r\n   * Clears the diagram of all nodes, links, and model data.\r\n   * Also clears the UndoManager history and clipboard.\r\n   * The next state update will be treated as diagram initialization.\r\n   */\r\n   public clear(): void {\r\n    const diagram = this.diagram;\r\n    if (diagram !== null) {\r\n      diagram.clear();\r\n      this.wasCleared = true;\r\n    }\r\n  } // end clear function\r\n\r\n  /**\r\n   * Set this.diagram.div to null, removing all event listeners\r\n   */\r\n  public ngOnDestroy() {\r\n    this.diagram.div = null; // removes event listeners\r\n  } // end ngOnDestroy function\r\n\r\n}\r\n","import { Component, ElementRef, EventEmitter, Input, NgZone, Output, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\nimport { NgDiagramHelper } from './ng-diagram-helper';\r\n@Component({\r\n  selector: 'gojs-palette',\r\n  template: '<div #ngPalette [className]=divClassName></div>'\r\n})\r\nexport class PaletteComponent {\r\n\r\n  /**\r\n   * Palette initialization function. Returns a go.Palette.\r\n   * Do not initialize model data in this function.\r\n   */\r\n  @Input() public initPalette: () => go.Palette;\r\n  /** Node data for palette */\r\n  @Input() public nodeDataArray: Array<go.ObjectData>;\r\n  /** Link data for palette. Optional. */\r\n  @Input() public linkDataArray: Array<go.ObjectData> = null;\r\n  /** Model data for palette. Optional. */\r\n  @Input() public modelData: go.ObjectData = null;\r\n  /** Palette div class name. Use this name to style your palette in CSS */\r\n  @Input() public divClassName: string;\r\n\r\n  /** Event emitter -- fires when palette model changes. Capture this emitted event in parent component */\r\n  @Output() public modelChange: EventEmitter<go.IncrementalData> = new EventEmitter<go.IncrementalData>();\r\n  /** The DIV element holding the Palette */\r\n  @ViewChild('ngPalette', { static: true }) public paletteDiv: ElementRef;\r\n\r\n  /** The Palette itself */\r\n  public palette: go.Palette | null = null;\r\n\r\n  constructor(public zone: NgZone) {  } \r\n\r\n  /**\r\n   * Initialize Palette after view init\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.paletteDiv) {\r\n      throw new Error(\"paletteDiv is not defined\");\r\n    }\r\n    this.palette = this.initPalette();\r\n    if (!(this.palette instanceof go.Palette)) {\r\n      throw new Error(\"initPalette function did not return a go.Palette\");\r\n    }\r\n\r\n    // reduces change detection on mouse moves, boosting performance\r\n    NgDiagramHelper.makeMouseMoveRunOutsideAngularZone(this.palette, this.zone);\r\n\r\n    // assign the Palette's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n    // using the overridden addEventListener function above\r\n    const divRef = this.paletteDiv.nativeElement;\r\n    if (divRef == null) return;\r\n    this.palette.div = divRef;\r\n\r\n    // initialize palette model\r\n    NgDiagramHelper.initializeModel(this.palette, this.nodeDataArray, this.linkDataArray, this.modelData);\r\n  }\r\n\r\n  /**\r\n   * If a change has occured on an @Input property, merge the app-level changes with GoJS\r\n   */\r\n  public ngOnChanges() {\r\n    if (!this.palette || !this.palette.model) return;\r\n    NgDiagramHelper.mergeAppDataWithModel(this);\r\n  } // end ngOnChanges \r\n  \r\n\r\n  public ngOnDestroy() {\r\n    this.palette.div = null; // removes event listeners\r\n  }\r\n\r\n}\r\n","import { Component, ElementRef, Input, NgZone, SimpleChanges, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\nimport { NgDiagramHelper } from \"./ng-diagram-helper\";\r\n\r\n@Component({\r\n  selector: 'gojs-overview',\r\n  template: '<div #ngOverview [className]=divClassName></div>'\r\n})\r\nexport class OverviewComponent {\r\n\r\n  /** The function used to initialize and return the Overview */ \r\n  @Input() public initOverview: () => go.Overview;\r\n  /** The div class name that holds the Overview. Use this name to style your Overview in CSS. */\r\n  @Input() public divClassName: string;\r\n  /** The Diagram to observe with the Overview */\r\n  @Input() public observedDiagram: go.Diagram = null;\r\n\r\n  @ViewChild('ngOverview', { static: true }) public overviewDiv: ElementRef;\r\n\r\n  /** The Overview itself  */\r\n  public overview: go.Overview | null = null;\r\n\r\n  constructor(public zone: NgZone) { }\r\n\r\n  /**\r\n   * Initialize the overview\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.overviewDiv) {\r\n      throw new Error(\"overviewDiv is not defined\");\r\n    }\r\n    if (this.initOverview) {\r\n      this.overview = this.initOverview();\r\n      if (!(this.overview instanceof go.Overview)) {\r\n        throw new Error(\"initOverview function did not return a go.Overview\");\r\n      }\r\n    } else {\r\n      this.overview = new go.Overview();\r\n      this.overview.contentAlignment = go.Spot.Center;\r\n    }\r\n\r\n    // reduces change detection on mouse moves, boosting performance\r\n    NgDiagramHelper.makeMouseMoveRunOutsideAngularZone(this.overview, this.zone);\r\n\r\n    this.overview.div = this.overviewDiv.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Only update when the observed diagram changes\r\n   * @param changes\r\n   */\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    if (!this.overview) return;\r\n    if (changes && changes.observedDiagram && changes.observedDiagram.currentValue !== changes.observedDiagram.previousValue) {\r\n      this.overview.observed = changes.observedDiagram.currentValue;\r\n    }\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.overview.div = null; // removes event listeners\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport * as go from 'gojs';\r\nimport produce from \"immer\";\r\n\r\n@Injectable()\r\nexport class DataSyncService {\r\n\r\n  /**\r\n   * Sync a node data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param nodeData The node data array to merge these changes with\r\n   * @param model Required if you have defined your model.nodeKeyProperty to be something other than 'key'\r\n   * @returns A node data array, merged with the changes\r\n   */\r\n  public static syncNodeData(changes: go.IncrementalData, nodeData: Array<go.ObjectData>, model?: go.Model) {\r\n    if (!changes) return nodeData;\r\n    if (!changes.modifiedNodeData && !changes.insertedNodeKeys && !changes.removedNodeKeys) return nodeData;\r\n\r\n    // maintain a map of modified nodes for fast lookup during insertion\r\n    const modifiedNodesMap = new go.Map<go.Key, go.ObjectData>();\r\n\r\n    // nodeData is immutable, modify it using the immer package's \"produce\" function (creates new array)\r\n    var newNodeDataArray = produce(nodeData, (draft) => {\r\n      // account for modified node data\r\n      if (changes.modifiedNodeData) {\r\n        changes.modifiedNodeData.forEach((nd: go.ObjectData) => {\r\n          // Get the value of the node key property checking wether is a function or a string\r\n          const key = model ? model.getKeyForNodeData(nd) : nd['key'];\r\n          modifiedNodesMap.set(key, nd);\r\n          for (let i = 0; i < nodeData.length; i++) {\r\n            const ndEntry = nodeData[i];\r\n            const keyNdEntry = model ? model.getKeyForNodeData(ndEntry) : ndEntry['key'];\r\n            if (keyNdEntry === key) {\r\n              draft[i] = nd;\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // account for inserted node data\r\n      if (changes.insertedNodeKeys) {\r\n        changes.insertedNodeKeys.forEach((key: go.Key) => {\r\n          const nd = modifiedNodesMap.get(key);\r\n          if (nd) {\r\n            draft.push(nd);\r\n          }\r\n        });\r\n      }\r\n\r\n      // account for removed node data\r\n      if (changes.removedNodeKeys) {\r\n        return draft.filter((nd: go.ObjectData) => {\r\n          const key = model ? model.getKeyForNodeData(nd) : nd['key'];\r\n          if (changes.removedNodeKeys.includes(key)) {\r\n            return false;\r\n          } \r\n          return true;\r\n        });\r\n      }\r\n    });\r\n\r\n    return newNodeDataArray;\r\n  }\r\n\r\n  /**\r\n   * Sync a link data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param linkData The link data array to merge these changes with\r\n   * @param model Required if you have defined your model.linkKeyProperty to be something other than 'key'\r\n   * @returns A link data array, merged with the changes\r\n   */\r\n  public static syncLinkData(changes: go.IncrementalData, linkData: Array<go.ObjectData>, model?: go.GraphLinksModel) {\r\n    if (!changes) return linkData;\r\n    if (!changes.modifiedLinkData && !changes.insertedLinkKeys && !changes.removedLinkKeys) return linkData;\r\n\r\n    // maintain a map of modified nodes for fast lookup during insertion\r\n    const modifiedLinksMap = new go.Map<go.Key, go.ObjectData>();\r\n\r\n    // linkData is immutable, modify it using the immer package's \"produce\" function (creates new array)\r\n    linkData = produce(linkData, draft => {\r\n      // account for modified link data\r\n      if (changes.modifiedLinkData) {\r\n        changes.modifiedLinkData.forEach((ld: go.ObjectData) => {\r\n          // Get the value of the link key\r\n          const key = model ? model.getKeyForLinkData(ld) : ld['key'];\r\n          modifiedLinksMap.set(key, ld);\r\n\r\n          for (let i = 0; i < linkData.length; i++) {\r\n            const ldEntry = linkData[i];\r\n            const keyLdEntry = model ? model.getKeyForLinkData(ldEntry) : ldEntry['key'];\r\n            if (keyLdEntry === key) {\r\n              draft[i] = ld;\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // account for inserted link data\r\n      if (changes.insertedLinkKeys) {\r\n        changes.insertedLinkKeys.forEach((key: go.Key) => {\r\n          const nd = modifiedLinksMap.get(key);\r\n          if (nd) {\r\n            draft.push(nd);\r\n          }\r\n        });\r\n      }\r\n\r\n      // account for removed link data\r\n      if (changes.removedLinkKeys) {\r\n        return draft.filter((ld: go.ObjectData) => {\r\n          const key = model ? model.getKeyForLinkData(ld) : ld['key'];\r\n          if (changes.removedLinkKeys.includes(key)) {\r\n            return false;\r\n          } return true;\r\n        });\r\n      }\r\n    });\r\n\r\n    return linkData;\r\n  }\r\n\r\n  /**\r\n   * Sync modelData with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param modelData The modelData to merge these changes with\r\n   * @returns A modelData object, merged with the changes\r\n   */\r\n  public static syncModelData(changes: go.IncrementalData, modelData: go.ObjectData) {\r\n    if (!changes) return modelData;\r\n    if (!changes.modelData) return modelData;\r\n    if (changes.modelData) {\r\n      return changes.modelData;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { DataSyncService } from './data-sync.service';\r\nimport { DiagramComponent } from './diagram.component';\r\nimport { OverviewComponent } from './overview.component';\r\nimport { PaletteComponent } from './palette.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DiagramComponent,\r\n    OverviewComponent,\r\n    PaletteComponent\r\n  ],\r\n  imports: [\r\n  ],\r\n  providers: [\r\n    DataSyncService\r\n  ],\r\n  exports: [\r\n    DiagramComponent,\r\n    OverviewComponent,\r\n    PaletteComponent\r\n  ]\r\n})\r\nexport class GojsAngularModule { }\r\n"],"names":[],"mappings":"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"}
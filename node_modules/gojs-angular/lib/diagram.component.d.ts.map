{"version":3,"file":"diagram.component.d.ts","sources":["diagram.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, NgZone } from '@angular/core';\r\nimport * as go from 'gojs';\r\nexport declare class DiagramComponent {\r\n    zone: NgZone;\r\n    /**\r\n     * Diagram initialization function. Returns a go.Diagram.\r\n     * Do not initialize model data in this function.\r\n     */\r\n    initDiagram: () => go.Diagram;\r\n    /**  Node data for diagram */\r\n    nodeDataArray: Array<go.ObjectData>;\r\n    /**  Link data for diagram. Optional. */\r\n    linkDataArray: Array<go.ObjectData>;\r\n    /** Model data for diagram. Optional. */\r\n    modelData: go.ObjectData;\r\n    /** Diagram div class name. Use this name to style your diagram in CSS. */\r\n    divClassName: string;\r\n    /** Model changed listener function for diagram */\r\n    modelChangedListener: ((e: go.ChangedEvent) => void) | null;\r\n    /** Whether or not to skip merging app data with GoJS model data (set to true if update is coming from GoJS, false if coming from app-level, usually) */\r\n    skipsDiagramUpdate: boolean;\r\n    /** Event emitter -- fires when diagram model changes. Capture this emitted event in parent component */\r\n    modelChange: EventEmitter<go.IncrementalData>;\r\n    /** The DIV element holding the Diagram */\r\n    diagramDiv: ElementRef;\r\n    /** The Diagram itself */\r\n    diagram: go.Diagram;\r\n    /** An internal flag used to tell ngOnChanges to treat the next sync operation as a Diagram initialization */\r\n    private wasCleared;\r\n    constructor(zone: NgZone);\r\n    /**\r\n     * Initializes diagram / model after view init\r\n     */\r\n    ngAfterViewInit(): void;\r\n    /**\r\n     * If a change has occurred on an @Input property, merge the app-level changes with GoJS\r\n     */\r\n    ngOnChanges(): void;\r\n    /**\r\n     * Clears the diagram of all nodes, links, and model data.\r\n     * Also clears the UndoManager history and clipboard.\r\n     * The next state update will be treated as diagram initialization.\r\n     */\r\n    clear(): void;\r\n    /**\r\n     * Set this.diagram.div to null, removing all event listeners\r\n     */\r\n    ngOnDestroy(): void;\r\n}\r\n"]}
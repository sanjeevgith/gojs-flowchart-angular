{"version":3,"file":"palette.component.d.ts","sources":["palette.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, NgZone } from '@angular/core';\r\nimport * as go from 'gojs';\r\nexport declare class PaletteComponent {\r\n    zone: NgZone;\r\n    /**\r\n     * Palette initialization function. Returns a go.Palette.\r\n     * Do not initialize model data in this function.\r\n     */\r\n    initPalette: () => go.Palette;\r\n    /** Node data for palette */\r\n    nodeDataArray: Array<go.ObjectData>;\r\n    /** Link data for palette. Optional. */\r\n    linkDataArray: Array<go.ObjectData>;\r\n    /** Model data for palette. Optional. */\r\n    modelData: go.ObjectData;\r\n    /** Palette div class name. Use this name to style your palette in CSS */\r\n    divClassName: string;\r\n    /** Event emitter -- fires when palette model changes. Capture this emitted event in parent component */\r\n    modelChange: EventEmitter<go.IncrementalData>;\r\n    /** The DIV element holding the Palette */\r\n    paletteDiv: ElementRef;\r\n    /** The Palette itself */\r\n    palette: go.Palette | null;\r\n    constructor(zone: NgZone);\r\n    /**\r\n     * Initialize Palette after view init\r\n     */\r\n    ngAfterViewInit(): void;\r\n    /**\r\n     * If a change has occured on an @Input property, merge the app-level changes with GoJS\r\n     */\r\n    ngOnChanges(): void;\r\n    ngOnDestroy(): void;\r\n}\r\n"]}
import { NgZone } from "@angular/core";
import { EventEmitter } from "events";
import * as go from "gojs";
import { DiagramComponent } from "./diagram.component";
/**
 * An interface to allow methods defined below to accept Palette or Diagram Components,
 * without requiring DiagramComponent or PaletteComponent directly in this file
 * (that would create a circular dependency)
 */
export interface IDiagramOrPaletteComponent {
    modelChange: EventEmitter<go.IncrementalData>;
    zone: NgZone;
    nodeDataArray: Array<go.ObjectData>;
    linkDataArray: Array<go.ObjectData>;
    modelData: go.ObjectData;
}
/**
 * Defines some shared helper static functions, used in Diagram / Palette / Overview Components
 */
export declare class NgDiagramHelper {
    constructor();
    /**
     * Ensures mousemove event listeners on a diagram's canvas are run outside NgZone.
     * This way, change detection isn't triggered on each mousemove, improving performance.
     *
     * If some state-alteration must happen on a mousemove event inside the diagram, use zone.run() to make sure the event triggers angular change detection.
     * Used by DiagramComponent, PaletteComponent, and OverviewComponent in their ngAfterViewInit lifecycle hooks
     * @param diagram
     * @param zone
     */
    static makeMouseMoveRunOutsideAngularZone(diagram: go.Diagram, zone: NgZone): void;
    /**
     * Initialize a given diagram's model with given node / link / model data
     * @param diagram
     * @param nodeDataArray
     * @param linkDataArray
     * @param modelData
     */
    static initializeModel(diagram: go.Diagram | go.Palette, nodeDataArray: Array<go.ObjectData>, linkDataArray: Array<go.ObjectData>, modelData: go.ObjectData): void;
    /**
     * Initialize the model changed listener for the Palette / Diagram of a given compoennt; ensure it runs inside the component's ngZone.
     * Those changes will be emitted through a the component's modelChange EventEmitter.
     * @param component
     */
    static initializeModelChangedListener(component: DiagramComponent): void;
    /**
     * Merge the app-level node / link / model data of a supplied Diagram|Palette Component with its underlying Diagram|Palette model data
     * @param component
     * @param isInit Whether or not to treat this update as a Diagram initialization
     */
    static mergeAppDataWithModel(component: IDiagramOrPaletteComponent, isInit?: boolean): void;
}
